
CameraFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a8c4  08003f14  08003f14  00004f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7d8  0800e7d8  00010028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e7d8  0800e7d8  0000f7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7e0  0800e7e0  00010028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7e0  0800e7e0  0000f7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e7e4  0800e7e4  0000f7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800e7e8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c2e4  20000028  0800e810  00010028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001c30c  0800e810  0001030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008948  00000000  00000000  00010058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b54  00000000  00000000  000189a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0001a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fc  00000000  00000000  0001ad08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025375  00000000  00000000  0001b304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a09a  00000000  00000000  00040679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e550c  00000000  00000000  0004a713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012fc1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f80  00000000  00000000  0012fc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00131be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000028 	.word	0x20000028
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003efc 	.word	0x08003efc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000002c 	.word	0x2000002c
 8000204:	08003efc 	.word	0x08003efc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b988 	b.w	8000530 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	468e      	mov	lr, r1
 8000240:	4604      	mov	r4, r0
 8000242:	4688      	mov	r8, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d962      	bls.n	8000314 <__udivmoddi4+0xdc>
 800024e:	fab2 f682 	clz	r6, r2
 8000252:	b14e      	cbz	r6, 8000268 <__udivmoddi4+0x30>
 8000254:	f1c6 0320 	rsb	r3, r6, #32
 8000258:	fa01 f806 	lsl.w	r8, r1, r6
 800025c:	fa20 f303 	lsr.w	r3, r0, r3
 8000260:	40b7      	lsls	r7, r6
 8000262:	ea43 0808 	orr.w	r8, r3, r8
 8000266:	40b4      	lsls	r4, r6
 8000268:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026c:	fa1f fc87 	uxth.w	ip, r7
 8000270:	fbb8 f1fe 	udiv	r1, r8, lr
 8000274:	0c23      	lsrs	r3, r4, #16
 8000276:	fb0e 8811 	mls	r8, lr, r1, r8
 800027a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027e:	fb01 f20c 	mul.w	r2, r1, ip
 8000282:	429a      	cmp	r2, r3
 8000284:	d909      	bls.n	800029a <__udivmoddi4+0x62>
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	f101 30ff 	add.w	r0, r1, #4294967295
 800028c:	f080 80ea 	bcs.w	8000464 <__udivmoddi4+0x22c>
 8000290:	429a      	cmp	r2, r3
 8000292:	f240 80e7 	bls.w	8000464 <__udivmoddi4+0x22c>
 8000296:	3902      	subs	r1, #2
 8000298:	443b      	add	r3, r7
 800029a:	1a9a      	subs	r2, r3, r2
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ae:	459c      	cmp	ip, r3
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0x8e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b8:	f080 80d6 	bcs.w	8000468 <__udivmoddi4+0x230>
 80002bc:	459c      	cmp	ip, r3
 80002be:	f240 80d3 	bls.w	8000468 <__udivmoddi4+0x230>
 80002c2:	443b      	add	r3, r7
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ca:	eba3 030c 	sub.w	r3, r3, ip
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa2>
 80002d2:	40f3      	lsrs	r3, r6
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xb6>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb0>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa2>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x14c>
 80002f6:	4573      	cmp	r3, lr
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xc8>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 8105 	bhi.w	800050a <__udivmoddi4+0x2d2>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb6e 0203 	sbc.w	r2, lr, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4690      	mov	r8, r2
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e5      	beq.n	80002da <__udivmoddi4+0xa2>
 800030e:	e9c5 4800 	strd	r4, r8, [r5]
 8000312:	e7e2      	b.n	80002da <__udivmoddi4+0xa2>
 8000314:	2a00      	cmp	r2, #0
 8000316:	f000 8090 	beq.w	800043a <__udivmoddi4+0x202>
 800031a:	fab2 f682 	clz	r6, r2
 800031e:	2e00      	cmp	r6, #0
 8000320:	f040 80a4 	bne.w	800046c <__udivmoddi4+0x234>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800032c:	b280      	uxth	r0, r0
 800032e:	b2bc      	uxth	r4, r7
 8000330:	2101      	movs	r1, #1
 8000332:	fbb2 fcfe 	udiv	ip, r2, lr
 8000336:	fb0e 221c 	mls	r2, lr, ip, r2
 800033a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033e:	fb04 f20c 	mul.w	r2, r4, ip
 8000342:	429a      	cmp	r2, r3
 8000344:	d907      	bls.n	8000356 <__udivmoddi4+0x11e>
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	f10c 38ff 	add.w	r8, ip, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x11c>
 800034e:	429a      	cmp	r2, r3
 8000350:	f200 80e0 	bhi.w	8000514 <__udivmoddi4+0x2dc>
 8000354:	46c4      	mov	ip, r8
 8000356:	1a9b      	subs	r3, r3, r2
 8000358:	fbb3 f2fe 	udiv	r2, r3, lr
 800035c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000360:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000364:	fb02 f404 	mul.w	r4, r2, r4
 8000368:	429c      	cmp	r4, r3
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x144>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x142>
 8000374:	429c      	cmp	r4, r3
 8000376:	f200 80ca 	bhi.w	800050e <__udivmoddi4+0x2d6>
 800037a:	4602      	mov	r2, r0
 800037c:	1b1b      	subs	r3, r3, r4
 800037e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x98>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa0e f401 	lsl.w	r4, lr, r1
 8000394:	fa20 f306 	lsr.w	r3, r0, r6
 8000398:	fa2e fe06 	lsr.w	lr, lr, r6
 800039c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	fa1f fc87 	uxth.w	ip, r7
 80003aa:	fbbe f0f9 	udiv	r0, lr, r9
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003bc:	45a6      	cmp	lr, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1a0>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ca:	f080 809c 	bcs.w	8000506 <__udivmoddi4+0x2ce>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f240 8099 	bls.w	8000506 <__udivmoddi4+0x2ce>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	fa1f fe83 	uxth.w	lr, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f0:	45a4      	cmp	ip, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1ce>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003fa:	f080 8082 	bcs.w	8000502 <__udivmoddi4+0x2ca>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d97f      	bls.n	8000502 <__udivmoddi4+0x2ca>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000412:	4564      	cmp	r4, ip
 8000414:	4673      	mov	r3, lr
 8000416:	46e1      	mov	r9, ip
 8000418:	d362      	bcc.n	80004e0 <__udivmoddi4+0x2a8>
 800041a:	d05f      	beq.n	80004dc <__udivmoddi4+0x2a4>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x1fe>
 800041e:	ebb8 0203 	subs.w	r2, r8, r3
 8000422:	eb64 0409 	sbc.w	r4, r4, r9
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	fa22 f301 	lsr.w	r3, r2, r1
 800042e:	431e      	orrs	r6, r3
 8000430:	40cc      	lsrs	r4, r1
 8000432:	e9c5 6400 	strd	r6, r4, [r5]
 8000436:	2100      	movs	r1, #0
 8000438:	e74f      	b.n	80002da <__udivmoddi4+0xa2>
 800043a:	fbb1 fcf2 	udiv	ip, r1, r2
 800043e:	0c01      	lsrs	r1, r0, #16
 8000440:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000444:	b280      	uxth	r0, r0
 8000446:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800044a:	463b      	mov	r3, r7
 800044c:	4638      	mov	r0, r7
 800044e:	463c      	mov	r4, r7
 8000450:	46b8      	mov	r8, r7
 8000452:	46be      	mov	lr, r7
 8000454:	2620      	movs	r6, #32
 8000456:	fbb1 f1f7 	udiv	r1, r1, r7
 800045a:	eba2 0208 	sub.w	r2, r2, r8
 800045e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000462:	e766      	b.n	8000332 <__udivmoddi4+0xfa>
 8000464:	4601      	mov	r1, r0
 8000466:	e718      	b.n	800029a <__udivmoddi4+0x62>
 8000468:	4610      	mov	r0, r2
 800046a:	e72c      	b.n	80002c6 <__udivmoddi4+0x8e>
 800046c:	f1c6 0220 	rsb	r2, r6, #32
 8000470:	fa2e f302 	lsr.w	r3, lr, r2
 8000474:	40b7      	lsls	r7, r6
 8000476:	40b1      	lsls	r1, r6
 8000478:	fa20 f202 	lsr.w	r2, r0, r2
 800047c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000480:	430a      	orrs	r2, r1
 8000482:	fbb3 f8fe 	udiv	r8, r3, lr
 8000486:	b2bc      	uxth	r4, r7
 8000488:	fb0e 3318 	mls	r3, lr, r8, r3
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb08 f904 	mul.w	r9, r8, r4
 8000496:	40b0      	lsls	r0, r6
 8000498:	4589      	cmp	r9, r1
 800049a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049e:	b280      	uxth	r0, r0
 80004a0:	d93e      	bls.n	8000520 <__udivmoddi4+0x2e8>
 80004a2:	1879      	adds	r1, r7, r1
 80004a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x276>
 80004aa:	4589      	cmp	r9, r1
 80004ac:	d81f      	bhi.n	80004ee <__udivmoddi4+0x2b6>
 80004ae:	eba1 0109 	sub.w	r1, r1, r9
 80004b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b6:	fb09 f804 	mul.w	r8, r9, r4
 80004ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80004be:	b292      	uxth	r2, r2
 80004c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d229      	bcs.n	800051c <__udivmoddi4+0x2e4>
 80004c8:	18ba      	adds	r2, r7, r2
 80004ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ce:	d2c4      	bcs.n	800045a <__udivmoddi4+0x222>
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d2c2      	bcs.n	800045a <__udivmoddi4+0x222>
 80004d4:	f1a9 0102 	sub.w	r1, r9, #2
 80004d8:	443a      	add	r2, r7
 80004da:	e7be      	b.n	800045a <__udivmoddi4+0x222>
 80004dc:	45f0      	cmp	r8, lr
 80004de:	d29d      	bcs.n	800041c <__udivmoddi4+0x1e4>
 80004e0:	ebbe 0302 	subs.w	r3, lr, r2
 80004e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e8:	3801      	subs	r0, #1
 80004ea:	46e1      	mov	r9, ip
 80004ec:	e796      	b.n	800041c <__udivmoddi4+0x1e4>
 80004ee:	eba7 0909 	sub.w	r9, r7, r9
 80004f2:	4449      	add	r1, r9
 80004f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fc:	fb09 f804 	mul.w	r8, r9, r4
 8000500:	e7db      	b.n	80004ba <__udivmoddi4+0x282>
 8000502:	4673      	mov	r3, lr
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1ce>
 8000506:	4650      	mov	r0, sl
 8000508:	e766      	b.n	80003d8 <__udivmoddi4+0x1a0>
 800050a:	4608      	mov	r0, r1
 800050c:	e6fd      	b.n	800030a <__udivmoddi4+0xd2>
 800050e:	443b      	add	r3, r7
 8000510:	3a02      	subs	r2, #2
 8000512:	e733      	b.n	800037c <__udivmoddi4+0x144>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	443b      	add	r3, r7
 800051a:	e71c      	b.n	8000356 <__udivmoddi4+0x11e>
 800051c:	4649      	mov	r1, r9
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x222>
 8000520:	eba1 0109 	sub.w	r1, r1, r9
 8000524:	46c4      	mov	ip, r8
 8000526:	fbb1 f9fe 	udiv	r9, r1, lr
 800052a:	fb09 f804 	mul.w	r8, r9, r4
 800052e:	e7c4      	b.n	80004ba <__udivmoddi4+0x282>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800053e:	2200      	movs	r2, #0
 8000540:	2110      	movs	r1, #16
 8000542:	480c      	ldr	r0, [pc, #48]	@ (8000574 <ST7789_WriteCommand+0x40>)
 8000544:	f002 fab6 	bl	8002ab4 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000548:	2200      	movs	r2, #0
 800054a:	2180      	movs	r1, #128	@ 0x80
 800054c:	480a      	ldr	r0, [pc, #40]	@ (8000578 <ST7789_WriteCommand+0x44>)
 800054e:	f002 fab1 	bl	8002ab4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000552:	1df9      	adds	r1, r7, #7
 8000554:	f04f 33ff 	mov.w	r3, #4294967295
 8000558:	2201      	movs	r2, #1
 800055a:	4808      	ldr	r0, [pc, #32]	@ (800057c <ST7789_WriteCommand+0x48>)
 800055c:	f003 f815 	bl	800358a <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000560:	2201      	movs	r2, #1
 8000562:	2110      	movs	r1, #16
 8000564:	4803      	ldr	r0, [pc, #12]	@ (8000574 <ST7789_WriteCommand+0x40>)
 8000566:	f002 faa5 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020000 	.word	0x40020000
 8000578:	40020c00 	.word	0x40020c00
 800057c:	2001c244 	.word	0x2001c244

08000580 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 800058a:	2200      	movs	r2, #0
 800058c:	2110      	movs	r1, #16
 800058e:	4820      	ldr	r0, [pc, #128]	@ (8000610 <ST7789_WriteData+0x90>)
 8000590:	f002 fa90 	bl	8002ab4 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000594:	2201      	movs	r2, #1
 8000596:	2180      	movs	r1, #128	@ 0x80
 8000598:	481e      	ldr	r0, [pc, #120]	@ (8000614 <ST7789_WriteData+0x94>)
 800059a:	f002 fa8b 	bl	8002ab4 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 800059e:	e02a      	b.n	80005f6 <ST7789_WriteData+0x76>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005a6:	4293      	cmp	r3, r2
 80005a8:	bf28      	it	cs
 80005aa:	4613      	movcs	r3, r2
 80005ac:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 80005ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000618 <ST7789_WriteData+0x98>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d30e      	bcc.n	80005d8 <ST7789_WriteData+0x58>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 80005ba:	89fb      	ldrh	r3, [r7, #14]
 80005bc:	461a      	mov	r2, r3
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	4816      	ldr	r0, [pc, #88]	@ (800061c <ST7789_WriteData+0x9c>)
 80005c2:	f003 f959 	bl	8003878 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY);
 80005c6:	bf00      	nop
 80005c8:	4b14      	ldr	r3, [pc, #80]	@ (800061c <ST7789_WriteData+0x9c>)
 80005ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80005cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d1f8      	bne.n	80005c8 <ST7789_WriteData+0x48>
 80005d6:	e006      	b.n	80005e6 <ST7789_WriteData+0x66>
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80005d8:	89fa      	ldrh	r2, [r7, #14]
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	480e      	ldr	r0, [pc, #56]	@ (800061c <ST7789_WriteData+0x9c>)
 80005e2:	f002 ffd2 	bl	800358a <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 80005e6:	89fb      	ldrh	r3, [r7, #14]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80005ee:	89fb      	ldrh	r3, [r7, #14]
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1d1      	bne.n	80005a0 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	4803      	ldr	r0, [pc, #12]	@ (8000610 <ST7789_WriteData+0x90>)
 8000602:	f002 fa57 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40020000 	.word	0x40020000
 8000614:	40020c00 	.word	0x40020c00
 8000618:	20000000 	.word	0x20000000
 800061c:	2001c244 	.word	0x2001c244

08000620 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800062a:	2200      	movs	r2, #0
 800062c:	2110      	movs	r1, #16
 800062e:	480c      	ldr	r0, [pc, #48]	@ (8000660 <ST7789_WriteSmallData+0x40>)
 8000630:	f002 fa40 	bl	8002ab4 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000634:	2201      	movs	r2, #1
 8000636:	2180      	movs	r1, #128	@ 0x80
 8000638:	480a      	ldr	r0, [pc, #40]	@ (8000664 <ST7789_WriteSmallData+0x44>)
 800063a:	f002 fa3b 	bl	8002ab4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	2201      	movs	r2, #1
 8000646:	4808      	ldr	r0, [pc, #32]	@ (8000668 <ST7789_WriteSmallData+0x48>)
 8000648:	f002 ff9f 	bl	800358a <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800064c:	2201      	movs	r2, #1
 800064e:	2110      	movs	r1, #16
 8000650:	4803      	ldr	r0, [pc, #12]	@ (8000660 <ST7789_WriteSmallData+0x40>)
 8000652:	f002 fa2f 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020000 	.word	0x40020000
 8000664:	40020c00 	.word	0x40020c00
 8000668:	2001c244 	.word	0x2001c244

0800066c <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000676:	2036      	movs	r0, #54	@ 0x36
 8000678:	f7ff ff5c 	bl	8000534 <ST7789_WriteCommand>
	switch (m) {
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b03      	cmp	r3, #3
 8000680:	d81a      	bhi.n	80006b8 <ST7789_SetRotation+0x4c>
 8000682:	a201      	add	r2, pc, #4	@ (adr r2, 8000688 <ST7789_SetRotation+0x1c>)
 8000684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000688:	08000699 	.word	0x08000699
 800068c:	080006a1 	.word	0x080006a1
 8000690:	080006a9 	.word	0x080006a9
 8000694:	080006b1 	.word	0x080006b1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000698:	20c0      	movs	r0, #192	@ 0xc0
 800069a:	f7ff ffc1 	bl	8000620 <ST7789_WriteSmallData>
		break;
 800069e:	e00c      	b.n	80006ba <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80006a0:	20a0      	movs	r0, #160	@ 0xa0
 80006a2:	f7ff ffbd 	bl	8000620 <ST7789_WriteSmallData>
		break;
 80006a6:	e008      	b.n	80006ba <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff ffb9 	bl	8000620 <ST7789_WriteSmallData>
		break;
 80006ae:	e004      	b.n	80006ba <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80006b0:	2060      	movs	r0, #96	@ 0x60
 80006b2:	f7ff ffb5 	bl	8000620 <ST7789_WriteSmallData>
		break;
 80006b6:	e000      	b.n	80006ba <ST7789_SetRotation+0x4e>
	default:
		break;
 80006b8:	bf00      	nop
	}
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop

080006c4 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4604      	mov	r4, r0
 80006cc:	4608      	mov	r0, r1
 80006ce:	4611      	mov	r1, r2
 80006d0:	461a      	mov	r2, r3
 80006d2:	4623      	mov	r3, r4
 80006d4:	80fb      	strh	r3, [r7, #6]
 80006d6:	4603      	mov	r3, r0
 80006d8:	80bb      	strh	r3, [r7, #4]
 80006da:	460b      	mov	r3, r1
 80006dc:	807b      	strh	r3, [r7, #2]
 80006de:	4613      	mov	r3, r2
 80006e0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80006e2:	2200      	movs	r2, #0
 80006e4:	2110      	movs	r1, #16
 80006e6:	4825      	ldr	r0, [pc, #148]	@ (800077c <ST7789_SetAddressWindow+0xb8>)
 80006e8:	f002 f9e4 	bl	8002ab4 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	82fb      	strh	r3, [r7, #22]
 80006f0:	887b      	ldrh	r3, [r7, #2]
 80006f2:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	3350      	adds	r3, #80	@ 0x50
 80006f8:	827b      	strh	r3, [r7, #18]
 80006fa:	883b      	ldrh	r3, [r7, #0]
 80006fc:	3350      	adds	r3, #80	@ 0x50
 80006fe:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 8000700:	202a      	movs	r0, #42	@ 0x2a
 8000702:	f7ff ff17 	bl	8000534 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8000706:	8afb      	ldrh	r3, [r7, #22]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	b29b      	uxth	r3, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	733b      	strb	r3, [r7, #12]
 8000710:	8afb      	ldrh	r3, [r7, #22]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	737b      	strb	r3, [r7, #13]
 8000716:	8abb      	ldrh	r3, [r7, #20]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	73bb      	strb	r3, [r7, #14]
 8000720:	8abb      	ldrh	r3, [r7, #20]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2104      	movs	r1, #4
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff27 	bl	8000580 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000732:	202b      	movs	r0, #43	@ 0x2b
 8000734:	f7ff fefe 	bl	8000534 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8000738:	8a7b      	ldrh	r3, [r7, #18]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	b29b      	uxth	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	723b      	strb	r3, [r7, #8]
 8000742:	8a7b      	ldrh	r3, [r7, #18]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	727b      	strb	r3, [r7, #9]
 8000748:	8a3b      	ldrh	r3, [r7, #16]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	72bb      	strb	r3, [r7, #10]
 8000752:	8a3b      	ldrh	r3, [r7, #16]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2104      	movs	r1, #4
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff0e 	bl	8000580 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000764:	202c      	movs	r0, #44	@ 0x2c
 8000766:	f7ff fee5 	bl	8000534 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800076a:	2201      	movs	r2, #1
 800076c:	2110      	movs	r1, #16
 800076e:	4803      	ldr	r0, [pc, #12]	@ (800077c <ST7789_SetAddressWindow+0xb8>)
 8000770:	f002 f9a0 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 8000774:	bf00      	nop
 8000776:	371c      	adds	r7, #28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd90      	pop	{r4, r7, pc}
 800077c:	40020000 	.word	0x40020000

08000780 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b08b      	sub	sp, #44	@ 0x2c
 8000784:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8000786:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800078a:	2100      	movs	r1, #0
 800078c:	484b      	ldr	r0, [pc, #300]	@ (80008bc <ST7789_Init+0x13c>)
 800078e:	f003 fb89 	bl	8003ea4 <memset>
	#endif
	HAL_Delay(10);
 8000792:	200a      	movs	r0, #10
 8000794:	f001 fabc 	bl	8001d10 <HAL_Delay>
    ST7789_RST_Clr();
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800079e:	4848      	ldr	r0, [pc, #288]	@ (80008c0 <ST7789_Init+0x140>)
 80007a0:	f002 f988 	bl	8002ab4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80007a4:	200a      	movs	r0, #10
 80007a6:	f001 fab3 	bl	8001d10 <HAL_Delay>
    ST7789_RST_Set();
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007b0:	4843      	ldr	r0, [pc, #268]	@ (80008c0 <ST7789_Init+0x140>)
 80007b2:	f002 f97f 	bl	8002ab4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80007b6:	2014      	movs	r0, #20
 80007b8:	f001 faaa 	bl	8001d10 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80007bc:	203a      	movs	r0, #58	@ 0x3a
 80007be:	f7ff feb9 	bl	8000534 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80007c2:	2055      	movs	r0, #85	@ 0x55
 80007c4:	f7ff ff2c 	bl	8000620 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80007c8:	20b2      	movs	r0, #178	@ 0xb2
 80007ca:	f7ff feb3 	bl	8000534 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80007ce:	4a3d      	ldr	r2, [pc, #244]	@ (80008c4 <ST7789_Init+0x144>)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d8:	6018      	str	r0, [r3, #0]
 80007da:	3304      	adds	r3, #4
 80007dc:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2105      	movs	r1, #5
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fecb 	bl	8000580 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff3e 	bl	800066c <ST7789_SetRotation>

	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80007f0:	20b7      	movs	r0, #183	@ 0xb7
 80007f2:	f7ff fe9f 	bl	8000534 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80007f6:	2035      	movs	r0, #53	@ 0x35
 80007f8:	f7ff ff12 	bl	8000620 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80007fc:	20bb      	movs	r0, #187	@ 0xbb
 80007fe:	f7ff fe99 	bl	8000534 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8000802:	2019      	movs	r0, #25
 8000804:	f7ff ff0c 	bl	8000620 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL
 8000808:	20c0      	movs	r0, #192	@ 0xc0
 800080a:	f7ff fe93 	bl	8000534 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800080e:	202c      	movs	r0, #44	@ 0x2c
 8000810:	f7ff ff06 	bl	8000620 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8000814:	20c2      	movs	r0, #194	@ 0xc2
 8000816:	f7ff fe8d 	bl	8000534 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff ff00 	bl	8000620 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000820:	20c3      	movs	r0, #195	@ 0xc3
 8000822:	f7ff fe87 	bl	8000534 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8000826:	2012      	movs	r0, #18
 8000828:	f7ff fefa 	bl	8000620 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 800082c:	20c4      	movs	r0, #196	@ 0xc4
 800082e:	f7ff fe81 	bl	8000534 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000832:	2020      	movs	r0, #32
 8000834:	f7ff fef4 	bl	8000620 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000838:	20c6      	movs	r0, #198	@ 0xc6
 800083a:	f7ff fe7b 	bl	8000534 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800083e:	200f      	movs	r0, #15
 8000840:	f7ff feee 	bl	8000620 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000844:	20d0      	movs	r0, #208	@ 0xd0
 8000846:	f7ff fe75 	bl	8000534 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800084a:	20a4      	movs	r0, #164	@ 0xa4
 800084c:	f7ff fee8 	bl	8000620 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000850:	20a1      	movs	r0, #161	@ 0xa1
 8000852:	f7ff fee5 	bl	8000620 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8000856:	20e0      	movs	r0, #224	@ 0xe0
 8000858:	f7ff fe6c 	bl	8000534 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 800085c:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <ST7789_Init+0x148>)
 800085e:	f107 0410 	add.w	r4, r7, #16
 8000862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000864:	c407      	stmia	r4!, {r0, r1, r2}
 8000866:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	210e      	movs	r1, #14
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fe86 	bl	8000580 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000874:	20e1      	movs	r0, #225	@ 0xe1
 8000876:	f7ff fe5d 	bl	8000534 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800087a:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <ST7789_Init+0x14c>)
 800087c:	463c      	mov	r4, r7
 800087e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000880:	c407      	stmia	r4!, {r0, r1, r2}
 8000882:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000884:	463b      	mov	r3, r7
 8000886:	210e      	movs	r1, #14
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fe79 	bl	8000580 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800088e:	2021      	movs	r0, #33	@ 0x21
 8000890:	f7ff fe50 	bl	8000534 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000894:	2011      	movs	r0, #17
 8000896:	f7ff fe4d 	bl	8000534 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800089a:	2013      	movs	r0, #19
 800089c:	f7ff fe4a 	bl	8000534 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 80008a0:	2029      	movs	r0, #41	@ 0x29
 80008a2:	f7ff fe47 	bl	8000534 <ST7789_WriteCommand>

	HAL_Delay(50);
 80008a6:	2032      	movs	r0, #50	@ 0x32
 80008a8:	f001 fa32 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 f80f 	bl	80008d0 <ST7789_Fill_Color>
}
 80008b2:	bf00      	nop
 80008b4:	372c      	adds	r7, #44	@ 0x2c
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd90      	pop	{r4, r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000044 	.word	0x20000044
 80008c0:	40020800 	.word	0x40020800
 80008c4:	08003f14 	.word	0x08003f14
 80008c8:	08003f1c 	.word	0x08003f1c
 80008cc:	08003f2c 	.word	0x08003f2c

080008d0 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80008da:	23ef      	movs	r3, #239	@ 0xef
 80008dc:	22ef      	movs	r2, #239	@ 0xef
 80008de:	2100      	movs	r1, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff feef 	bl	80006c4 <ST7789_SetAddressWindow>
	ST7789_Select();
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4810      	ldr	r0, [pc, #64]	@ (800092c <ST7789_Fill_Color+0x5c>)
 80008ec:	f002 f8e2 	bl	8002ab4 <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	81fb      	strh	r3, [r7, #14]
 80008f4:	e00e      	b.n	8000914 <ST7789_Fill_Color+0x44>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	4619      	mov	r1, r3
 80008fe:	480c      	ldr	r0, [pc, #48]	@ (8000930 <ST7789_Fill_Color+0x60>)
 8000900:	f003 fad0 	bl	8003ea4 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8000904:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000908:	4809      	ldr	r0, [pc, #36]	@ (8000930 <ST7789_Fill_Color+0x60>)
 800090a:	f7ff fe39 	bl	8000580 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	3301      	adds	r3, #1
 8000912:	81fb      	strh	r3, [r7, #14]
 8000914:	89fb      	ldrh	r3, [r7, #14]
 8000916:	2b2f      	cmp	r3, #47	@ 0x2f
 8000918:	d9ed      	bls.n	80008f6 <ST7789_Fill_Color+0x26>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 800091a:	2201      	movs	r2, #1
 800091c:	2110      	movs	r1, #16
 800091e:	4803      	ldr	r0, [pc, #12]	@ (800092c <ST7789_Fill_Color+0x5c>)
 8000920:	f002 f8c8 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40020000 	.word	0x40020000
 8000930:	20000044 	.word	0x20000044

08000934 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
 800093e:	460b      	mov	r3, r1
 8000940:	80bb      	strh	r3, [r7, #4]
 8000942:	4613      	mov	r3, r2
 8000944:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	2bef      	cmp	r3, #239	@ 0xef
 800094a:	d821      	bhi.n	8000990 <ST7789_DrawPixel+0x5c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 800094c:	88bb      	ldrh	r3, [r7, #4]
 800094e:	2bef      	cmp	r3, #239	@ 0xef
 8000950:	d81e      	bhi.n	8000990 <ST7789_DrawPixel+0x5c>

	ST7789_SetAddressWindow(x, y, x, y);
 8000952:	88bb      	ldrh	r3, [r7, #4]
 8000954:	88fa      	ldrh	r2, [r7, #6]
 8000956:	88b9      	ldrh	r1, [r7, #4]
 8000958:	88f8      	ldrh	r0, [r7, #6]
 800095a:	f7ff feb3 	bl	80006c4 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 800095e:	887b      	ldrh	r3, [r7, #2]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	b29b      	uxth	r3, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	733b      	strb	r3, [r7, #12]
 8000968:	887b      	ldrh	r3, [r7, #2]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 800096e:	2200      	movs	r2, #0
 8000970:	2110      	movs	r1, #16
 8000972:	4809      	ldr	r0, [pc, #36]	@ (8000998 <ST7789_DrawPixel+0x64>)
 8000974:	f002 f89e 	bl	8002ab4 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2102      	movs	r1, #2
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fdfe 	bl	8000580 <ST7789_WriteData>
	ST7789_UnSelect();
 8000984:	2201      	movs	r2, #1
 8000986:	2110      	movs	r1, #16
 8000988:	4803      	ldr	r0, [pc, #12]	@ (8000998 <ST7789_DrawPixel+0x64>)
 800098a:	f002 f893 	bl	8002ab4 <HAL_GPIO_WritePin>
 800098e:	e000      	b.n	8000992 <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000990:	bf00      	nop
}
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40020000 	.word	0x40020000

0800099c <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b087      	sub	sp, #28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4604      	mov	r4, r0
 80009a4:	4608      	mov	r0, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4623      	mov	r3, r4
 80009ac:	80fb      	strh	r3, [r7, #6]
 80009ae:	4603      	mov	r3, r0
 80009b0:	80bb      	strh	r3, [r7, #4]
 80009b2:	460b      	mov	r3, r1
 80009b4:	807b      	strh	r3, [r7, #2]
 80009b6:	4613      	mov	r3, r2
 80009b8:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 80009ba:	883a      	ldrh	r2, [r7, #0]
 80009bc:	88bb      	ldrh	r3, [r7, #4]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009c4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009c8:	8879      	ldrh	r1, [r7, #2]
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	1acb      	subs	r3, r1, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	429a      	cmp	r2, r3
 80009d6:	bfcc      	ite	gt
 80009d8:	2301      	movgt	r3, #1
 80009da:	2300      	movle	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	827b      	strh	r3, [r7, #18]
    if (steep) {
 80009e0:	8a7b      	ldrh	r3, [r7, #18]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00b      	beq.n	80009fe <ST7789_DrawLine+0x62>
		swap = x0;
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80009ee:	8a3b      	ldrh	r3, [r7, #16]
 80009f0:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80009f2:	887b      	ldrh	r3, [r7, #2]
 80009f4:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 80009f6:	883b      	ldrh	r3, [r7, #0]
 80009f8:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 80009fa:	8a3b      	ldrh	r3, [r7, #16]
 80009fc:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80009fe:	88fa      	ldrh	r2, [r7, #6]
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d90b      	bls.n	8000a1e <ST7789_DrawLine+0x82>
		swap = x0;
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8000a0a:	887b      	ldrh	r3, [r7, #2]
 8000a0c:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8000a0e:	8a3b      	ldrh	r3, [r7, #16]
 8000a10:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8000a16:	883b      	ldrh	r3, [r7, #0]
 8000a18:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8000a1a:	8a3b      	ldrh	r3, [r7, #16]
 8000a1c:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000a1e:	887a      	ldrh	r2, [r7, #2]
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8000a28:	883a      	ldrh	r2, [r7, #0]
 8000a2a:	88bb      	ldrh	r3, [r7, #4]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8000a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	da00      	bge.n	8000a40 <ST7789_DrawLine+0xa4>
 8000a3e:	3301      	adds	r3, #1
 8000a40:	105b      	asrs	r3, r3, #1
 8000a42:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 8000a44:	88ba      	ldrh	r2, [r7, #4]
 8000a46:	883b      	ldrh	r3, [r7, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d202      	bcs.n	8000a52 <ST7789_DrawLine+0xb6>
        ystep = 1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	82bb      	strh	r3, [r7, #20]
 8000a50:	e028      	b.n	8000aa4 <ST7789_DrawLine+0x108>
    } else {
        ystep = -1;
 8000a52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a56:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8000a58:	e024      	b.n	8000aa4 <ST7789_DrawLine+0x108>
        if (steep) {
 8000a5a:	8a7b      	ldrh	r3, [r7, #18]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <ST7789_DrawLine+0xd2>
            ST7789_DrawPixel(y0, x0, color);
 8000a60:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000a62:	88f9      	ldrh	r1, [r7, #6]
 8000a64:	88bb      	ldrh	r3, [r7, #4]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff64 	bl	8000934 <ST7789_DrawPixel>
 8000a6c:	e005      	b.n	8000a7a <ST7789_DrawLine+0xde>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8000a6e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000a70:	88b9      	ldrh	r1, [r7, #4]
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff5d 	bl	8000934 <ST7789_DrawPixel>
        }
        err -= dy;
 8000a7a:	8afa      	ldrh	r2, [r7, #22]
 8000a7c:	89bb      	ldrh	r3, [r7, #12]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8000a84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	da08      	bge.n	8000a9e <ST7789_DrawLine+0x102>
            y0 += ystep;
 8000a8c:	8aba      	ldrh	r2, [r7, #20]
 8000a8e:	88bb      	ldrh	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8000a94:	8afa      	ldrh	r2, [r7, #22]
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	4413      	add	r3, r2
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	80fb      	strh	r3, [r7, #6]
 8000aa4:	88fa      	ldrh	r2, [r7, #6]
 8000aa6:	887b      	ldrh	r3, [r7, #2]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d9d6      	bls.n	8000a5a <ST7789_DrawLine+0xbe>
        }
    }
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	371c      	adds	r7, #28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd90      	pop	{r4, r7, pc}
	...

08000ab8 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	4604      	mov	r4, r0
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4623      	mov	r3, r4
 8000ac8:	80fb      	strh	r3, [r7, #6]
 8000aca:	4603      	mov	r3, r0
 8000acc:	80bb      	strh	r3, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	807b      	strh	r3, [r7, #2]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2110      	movs	r1, #16
 8000ada:	4818      	ldr	r0, [pc, #96]	@ (8000b3c <ST7789_DrawRectangle+0x84>)
 8000adc:	f001 ffea 	bl	8002ab4 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 8000ae0:	88bc      	ldrh	r4, [r7, #4]
 8000ae2:	887a      	ldrh	r2, [r7, #2]
 8000ae4:	88b9      	ldrh	r1, [r7, #4]
 8000ae6:	88f8      	ldrh	r0, [r7, #6]
 8000ae8:	8b3b      	ldrh	r3, [r7, #24]
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	4623      	mov	r3, r4
 8000aee:	f7ff ff55 	bl	800099c <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 8000af2:	883c      	ldrh	r4, [r7, #0]
 8000af4:	88fa      	ldrh	r2, [r7, #6]
 8000af6:	88b9      	ldrh	r1, [r7, #4]
 8000af8:	88f8      	ldrh	r0, [r7, #6]
 8000afa:	8b3b      	ldrh	r3, [r7, #24]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	4623      	mov	r3, r4
 8000b00:	f7ff ff4c 	bl	800099c <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 8000b04:	883c      	ldrh	r4, [r7, #0]
 8000b06:	887a      	ldrh	r2, [r7, #2]
 8000b08:	8839      	ldrh	r1, [r7, #0]
 8000b0a:	88f8      	ldrh	r0, [r7, #6]
 8000b0c:	8b3b      	ldrh	r3, [r7, #24]
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	4623      	mov	r3, r4
 8000b12:	f7ff ff43 	bl	800099c <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 8000b16:	883c      	ldrh	r4, [r7, #0]
 8000b18:	887a      	ldrh	r2, [r7, #2]
 8000b1a:	88b9      	ldrh	r1, [r7, #4]
 8000b1c:	8878      	ldrh	r0, [r7, #2]
 8000b1e:	8b3b      	ldrh	r3, [r7, #24]
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	4623      	mov	r3, r4
 8000b24:	f7ff ff3a 	bl	800099c <ST7789_DrawLine>
	ST7789_UnSelect();
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <ST7789_DrawRectangle+0x84>)
 8000b2e:	f001 ffc1 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40020000 	.word	0x40020000

08000b40 <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4604      	mov	r4, r0
 8000b48:	4608      	mov	r0, r1
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4623      	mov	r3, r4
 8000b50:	80fb      	strh	r3, [r7, #6]
 8000b52:	4603      	mov	r3, r0
 8000b54:	80bb      	strh	r3, [r7, #4]
 8000b56:	460b      	mov	r3, r1
 8000b58:	70fb      	strb	r3, [r7, #3]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	f1c3 0301 	rsb	r3, r3, #1
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000b6e:	78fb      	ldrb	r3, [r7, #3]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	03d2      	lsls	r2, r2, #15
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 8000b86:	2200      	movs	r2, #0
 8000b88:	2110      	movs	r1, #16
 8000b8a:	485f      	ldr	r0, [pc, #380]	@ (8000d08 <ST7789_DrawCircle+0x1c8>)
 8000b8c:	f001 ff92 	bl	8002ab4 <HAL_GPIO_WritePin>
	ST7789_DrawPixel(x0, y0 + r, color);
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	88bb      	ldrh	r3, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	b299      	uxth	r1, r3
 8000b9a:	883a      	ldrh	r2, [r7, #0]
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fec8 	bl	8000934 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	88ba      	ldrh	r2, [r7, #4]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	b299      	uxth	r1, r3
 8000bae:	883a      	ldrh	r2, [r7, #0]
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff febe 	bl	8000934 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	883a      	ldrh	r2, [r7, #0]
 8000bc4:	88b9      	ldrh	r1, [r7, #4]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff feb4 	bl	8000934 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8000bcc:	78fb      	ldrb	r3, [r7, #3]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	88fa      	ldrh	r2, [r7, #6]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	883a      	ldrh	r2, [r7, #0]
 8000bd8:	88b9      	ldrh	r1, [r7, #4]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff feaa 	bl	8000934 <ST7789_DrawPixel>

	while (x < y) {
 8000be0:	e081      	b.n	8000ce6 <ST7789_DrawCircle+0x1a6>
		if (f >= 0) {
 8000be2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0e      	blt.n	8000c08 <ST7789_DrawCircle+0xc8>
			y--;
 8000bea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000bf6:	8a7b      	ldrh	r3, [r7, #18]
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000bfe:	8afa      	ldrh	r2, [r7, #22]
 8000c00:	8a7b      	ldrh	r3, [r7, #18]
 8000c02:	4413      	add	r3, r2
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000c08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	3301      	adds	r3, #1
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000c14:	8abb      	ldrh	r3, [r7, #20]
 8000c16:	3302      	adds	r3, #2
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000c1c:	8afa      	ldrh	r2, [r7, #22]
 8000c1e:	8abb      	ldrh	r3, [r7, #20]
 8000c20:	4413      	add	r3, r2
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 8000c26:	8a3a      	ldrh	r2, [r7, #16]
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b298      	uxth	r0, r3
 8000c2e:	89fa      	ldrh	r2, [r7, #14]
 8000c30:	88bb      	ldrh	r3, [r7, #4]
 8000c32:	4413      	add	r3, r2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	883a      	ldrh	r2, [r7, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f7ff fe7b 	bl	8000934 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8000c3e:	8a3b      	ldrh	r3, [r7, #16]
 8000c40:	88fa      	ldrh	r2, [r7, #6]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	b298      	uxth	r0, r3
 8000c46:	89fa      	ldrh	r2, [r7, #14]
 8000c48:	88bb      	ldrh	r3, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	883a      	ldrh	r2, [r7, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f7ff fe6f 	bl	8000934 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 8000c56:	8a3a      	ldrh	r2, [r7, #16]
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b298      	uxth	r0, r3
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	88ba      	ldrh	r2, [r7, #4]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	883a      	ldrh	r2, [r7, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f7ff fe63 	bl	8000934 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 8000c6e:	8a3b      	ldrh	r3, [r7, #16]
 8000c70:	88fa      	ldrh	r2, [r7, #6]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	b298      	uxth	r0, r3
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	88ba      	ldrh	r2, [r7, #4]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	883a      	ldrh	r2, [r7, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f7ff fe57 	bl	8000934 <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 8000c86:	89fa      	ldrh	r2, [r7, #14]
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b298      	uxth	r0, r3
 8000c8e:	8a3a      	ldrh	r2, [r7, #16]
 8000c90:	88bb      	ldrh	r3, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	883a      	ldrh	r2, [r7, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f7ff fe4b 	bl	8000934 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8000c9e:	89fb      	ldrh	r3, [r7, #14]
 8000ca0:	88fa      	ldrh	r2, [r7, #6]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	b298      	uxth	r0, r3
 8000ca6:	8a3a      	ldrh	r2, [r7, #16]
 8000ca8:	88bb      	ldrh	r3, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	883a      	ldrh	r2, [r7, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f7ff fe3f 	bl	8000934 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 8000cb6:	89fa      	ldrh	r2, [r7, #14]
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	4413      	add	r3, r2
 8000cbc:	b298      	uxth	r0, r3
 8000cbe:	8a3b      	ldrh	r3, [r7, #16]
 8000cc0:	88ba      	ldrh	r2, [r7, #4]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	883a      	ldrh	r2, [r7, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f7ff fe33 	bl	8000934 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	88fa      	ldrh	r2, [r7, #6]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	b298      	uxth	r0, r3
 8000cd6:	8a3b      	ldrh	r3, [r7, #16]
 8000cd8:	88ba      	ldrh	r2, [r7, #4]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	883a      	ldrh	r2, [r7, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f7ff fe27 	bl	8000934 <ST7789_DrawPixel>
	while (x < y) {
 8000ce6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000cea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f6ff af77 	blt.w	8000be2 <ST7789_DrawCircle+0xa2>
	}
	ST7789_UnSelect();
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	4803      	ldr	r0, [pc, #12]	@ (8000d08 <ST7789_DrawCircle+0x1c8>)
 8000cfa:	f001 fedb 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 8000cfe:	bf00      	nop
 8000d00:	371c      	adds	r7, #28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd90      	pop	{r4, r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40020000 	.word	0x40020000

08000d0c <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4604      	mov	r4, r0
 8000d14:	4608      	mov	r0, r1
 8000d16:	4611      	mov	r1, r2
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4623      	mov	r3, r4
 8000d1c:	80fb      	strh	r3, [r7, #6]
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80bb      	strh	r3, [r7, #4]
 8000d22:	460b      	mov	r3, r1
 8000d24:	807b      	strh	r3, [r7, #2]
 8000d26:	4613      	mov	r3, r2
 8000d28:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	2bef      	cmp	r3, #239	@ 0xef
 8000d2e:	d831      	bhi.n	8000d94 <ST7789_DrawImage+0x88>
 8000d30:	88bb      	ldrh	r3, [r7, #4]
 8000d32:	2bef      	cmp	r3, #239	@ 0xef
 8000d34:	d82e      	bhi.n	8000d94 <ST7789_DrawImage+0x88>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8000d36:	88fa      	ldrh	r2, [r7, #6]
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	2bf0      	cmp	r3, #240	@ 0xf0
 8000d3e:	dc2b      	bgt.n	8000d98 <ST7789_DrawImage+0x8c>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 8000d40:	88ba      	ldrh	r2, [r7, #4]
 8000d42:	883b      	ldrh	r3, [r7, #0]
 8000d44:	4413      	add	r3, r2
 8000d46:	2bf0      	cmp	r3, #240	@ 0xf0
 8000d48:	dc28      	bgt.n	8000d9c <ST7789_DrawImage+0x90>
		return;

	ST7789_Select();
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	4815      	ldr	r0, [pc, #84]	@ (8000da4 <ST7789_DrawImage+0x98>)
 8000d50:	f001 feb0 	bl	8002ab4 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000d54:	88fa      	ldrh	r2, [r7, #6]
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4413      	add	r3, r2
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	b29c      	uxth	r4, r3
 8000d60:	88ba      	ldrh	r2, [r7, #4]
 8000d62:	883b      	ldrh	r3, [r7, #0]
 8000d64:	4413      	add	r3, r2
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	88b9      	ldrh	r1, [r7, #4]
 8000d6e:	88f8      	ldrh	r0, [r7, #6]
 8000d70:	4622      	mov	r2, r4
 8000d72:	f7ff fca7 	bl	80006c4 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	883a      	ldrh	r2, [r7, #0]
 8000d7a:	fb02 f303 	mul.w	r3, r2, r3
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4619      	mov	r1, r3
 8000d82:	69b8      	ldr	r0, [r7, #24]
 8000d84:	f7ff fbfc 	bl	8000580 <ST7789_WriteData>
	ST7789_UnSelect();
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <ST7789_DrawImage+0x98>)
 8000d8e:	f001 fe91 	bl	8002ab4 <HAL_GPIO_WritePin>
 8000d92:	e004      	b.n	8000d9e <ST7789_DrawImage+0x92>
		return;
 8000d94:	bf00      	nop
 8000d96:	e002      	b.n	8000d9e <ST7789_DrawImage+0x92>
		return;
 8000d98:	bf00      	nop
 8000d9a:	e000      	b.n	8000d9e <ST7789_DrawImage+0x92>
		return;
 8000d9c:	bf00      	nop
}
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	40020000 	.word	0x40020000

08000da8 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000da8:	b082      	sub	sp, #8
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b088      	sub	sp, #32
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
 8000db6:	460b      	mov	r3, r1
 8000db8:	80bb      	strh	r3, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	4837      	ldr	r0, [pc, #220]	@ (8000ea0 <ST7789_WriteChar+0xf8>)
 8000dc4:	f001 fe76 	bl	8002ab4 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000dc8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dcc:	461a      	mov	r2, r3
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000ddc:	4619      	mov	r1, r3
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	440b      	add	r3, r1
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	3b01      	subs	r3, #1
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	88b9      	ldrh	r1, [r7, #4]
 8000dea:	88f8      	ldrh	r0, [r7, #6]
 8000dec:	f7ff fc6a 	bl	80006c4 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	e041      	b.n	8000e7a <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8000df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	3b20      	subs	r3, #32
 8000dfc:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000e00:	fb01 f303 	mul.w	r3, r1, r3
 8000e04:	4619      	mov	r1, r3
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	440b      	add	r3, r1
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	e027      	b.n	8000e68 <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00e      	beq.n	8000e46 <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000e28:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000e2a:	0a1b      	lsrs	r3, r3, #8
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	743b      	strb	r3, [r7, #16]
 8000e32:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fb9e 	bl	8000580 <ST7789_WriteData>
 8000e44:	e00d      	b.n	8000e62 <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000e46:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	733b      	strb	r3, [r7, #12]
 8000e50:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fb8f 	bl	8000580 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	3301      	adds	r3, #1
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d3d1      	bcc.n	8000e18 <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	3301      	adds	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e7e:	461a      	mov	r2, r3
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d3b7      	bcc.n	8000df6 <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 8000e86:	2201      	movs	r2, #1
 8000e88:	2110      	movs	r1, #16
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <ST7789_WriteChar+0xf8>)
 8000e8c:	f001 fe12 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 8000e90:	bf00      	nop
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e9a:	b002      	add	sp, #8
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af04      	add	r7, sp, #16
 8000eac:	603a      	str	r2, [r7, #0]
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	80fb      	strh	r3, [r7, #6]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4821      	ldr	r0, [pc, #132]	@ (8000f44 <ST7789_WriteString+0xa0>)
 8000ebe:	f001 fdf9 	bl	8002ab4 <HAL_GPIO_WritePin>
	while (*str) {
 8000ec2:	e02d      	b.n	8000f20 <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	7d3a      	ldrb	r2, [r7, #20]
 8000ec8:	4413      	add	r3, r2
 8000eca:	2bef      	cmp	r3, #239	@ 0xef
 8000ecc:	dd13      	ble.n	8000ef6 <ST7789_WriteString+0x52>
			x = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8000ed2:	7d7b      	ldrb	r3, [r7, #21]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	88bb      	ldrh	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000edc:	88bb      	ldrh	r3, [r7, #4]
 8000ede:	7d7a      	ldrb	r2, [r7, #21]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	2bef      	cmp	r3, #239	@ 0xef
 8000ee4:	dc21      	bgt.n	8000f2a <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b20      	cmp	r3, #32
 8000eec:	d103      	bne.n	8000ef6 <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	603b      	str	r3, [r7, #0]
				continue;
 8000ef4:	e014      	b.n	8000f20 <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	781a      	ldrb	r2, [r3, #0]
 8000efa:	88b9      	ldrh	r1, [r7, #4]
 8000efc:	88f8      	ldrh	r0, [r7, #6]
 8000efe:	8c3b      	ldrh	r3, [r7, #32]
 8000f00:	9302      	str	r3, [sp, #8]
 8000f02:	8bbb      	ldrh	r3, [r7, #28]
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f7ff ff4c 	bl	8000da8 <ST7789_WriteChar>
		x += font.width;
 8000f10:	7d3b      	ldrb	r3, [r7, #20]
 8000f12:	461a      	mov	r2, r3
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	4413      	add	r3, r2
 8000f18:	80fb      	strh	r3, [r7, #6]
		str++;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1cd      	bne.n	8000ec4 <ST7789_WriteString+0x20>
 8000f28:	e000      	b.n	8000f2c <ST7789_WriteString+0x88>
				break;
 8000f2a:	bf00      	nop
	}
	ST7789_UnSelect();
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2110      	movs	r1, #16
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <ST7789_WriteString+0xa0>)
 8000f32:	f001 fdbf 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f40:	b002      	add	sp, #8
 8000f42:	4770      	bx	lr
 8000f44:	40020000 	.word	0x40020000

08000f48 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	4611      	mov	r1, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4623      	mov	r3, r4
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80bb      	strh	r3, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	807b      	strh	r3, [r7, #2]
 8000f62:	4613      	mov	r3, r2
 8000f64:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000f66:	2200      	movs	r2, #0
 8000f68:	2110      	movs	r1, #16
 8000f6a:	4822      	ldr	r0, [pc, #136]	@ (8000ff4 <ST7789_DrawFilledRectangle+0xac>)
 8000f6c:	f001 fda2 	bl	8002ab4 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	2bef      	cmp	r3, #239	@ 0xef
 8000f74:	d83a      	bhi.n	8000fec <ST7789_DrawFilledRectangle+0xa4>
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	2bef      	cmp	r3, #239	@ 0xef
 8000f7a:	d837      	bhi.n	8000fec <ST7789_DrawFilledRectangle+0xa4>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8000f7c:	88fa      	ldrh	r2, [r7, #6]
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	4413      	add	r3, r2
 8000f82:	2bef      	cmp	r3, #239	@ 0xef
 8000f84:	dd03      	ble.n	8000f8e <ST7789_DrawFilledRectangle+0x46>
		w = ST7789_WIDTH - x;
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000f8c:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8000f8e:	88ba      	ldrh	r2, [r7, #4]
 8000f90:	883b      	ldrh	r3, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	2bef      	cmp	r3, #239	@ 0xef
 8000f96:	dd03      	ble.n	8000fa0 <ST7789_DrawFilledRectangle+0x58>
		h = ST7789_HEIGHT - y;
 8000f98:	88bb      	ldrh	r3, [r7, #4]
 8000f9a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000f9e:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e017      	b.n	8000fd6 <ST7789_DrawFilledRectangle+0x8e>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	88bb      	ldrh	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	b299      	uxth	r1, r3
 8000fb0:	88fa      	ldrh	r2, [r7, #6]
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29c      	uxth	r4, r3
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	88bb      	ldrh	r3, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	88f8      	ldrh	r0, [r7, #6]
 8000fc4:	8c3b      	ldrh	r3, [r7, #32]
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	4622      	mov	r2, r4
 8000fcc:	f7ff fce6 	bl	800099c <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	883a      	ldrh	r2, [r7, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d2e2      	bcs.n	8000fa6 <ST7789_DrawFilledRectangle+0x5e>
	}
	ST7789_UnSelect();
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <ST7789_DrawFilledRectangle+0xac>)
 8000fe6:	f001 fd65 	bl	8002ab4 <HAL_GPIO_WritePin>
 8000fea:	e000      	b.n	8000fee <ST7789_DrawFilledRectangle+0xa6>
		return;
 8000fec:	bf00      	nop
}
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd90      	pop	{r4, r7, pc}
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <ST7789_DrawTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the lines
 * @return  none
 */
void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4604      	mov	r4, r0
 8001000:	4608      	mov	r0, r1
 8001002:	4611      	mov	r1, r2
 8001004:	461a      	mov	r2, r3
 8001006:	4623      	mov	r3, r4
 8001008:	80fb      	strh	r3, [r7, #6]
 800100a:	4603      	mov	r3, r0
 800100c:	80bb      	strh	r3, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	807b      	strh	r3, [r7, #2]
 8001012:	4613      	mov	r3, r2
 8001014:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001016:	2200      	movs	r2, #0
 8001018:	2110      	movs	r1, #16
 800101a:	4813      	ldr	r0, [pc, #76]	@ (8001068 <ST7789_DrawTriangle+0x70>)
 800101c:	f001 fd4a 	bl	8002ab4 <HAL_GPIO_WritePin>
	/* Draw lines */
	ST7789_DrawLine(x1, y1, x2, y2, color);
 8001020:	883c      	ldrh	r4, [r7, #0]
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	88b9      	ldrh	r1, [r7, #4]
 8001026:	88f8      	ldrh	r0, [r7, #6]
 8001028:	8c3b      	ldrh	r3, [r7, #32]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4623      	mov	r3, r4
 800102e:	f7ff fcb5 	bl	800099c <ST7789_DrawLine>
	ST7789_DrawLine(x2, y2, x3, y3, color);
 8001032:	8bbc      	ldrh	r4, [r7, #28]
 8001034:	8b3a      	ldrh	r2, [r7, #24]
 8001036:	8839      	ldrh	r1, [r7, #0]
 8001038:	8878      	ldrh	r0, [r7, #2]
 800103a:	8c3b      	ldrh	r3, [r7, #32]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	4623      	mov	r3, r4
 8001040:	f7ff fcac 	bl	800099c <ST7789_DrawLine>
	ST7789_DrawLine(x3, y3, x1, y1, color);
 8001044:	88bc      	ldrh	r4, [r7, #4]
 8001046:	88fa      	ldrh	r2, [r7, #6]
 8001048:	8bb9      	ldrh	r1, [r7, #28]
 800104a:	8b38      	ldrh	r0, [r7, #24]
 800104c:	8c3b      	ldrh	r3, [r7, #32]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4623      	mov	r3, r4
 8001052:	f7ff fca3 	bl	800099c <ST7789_DrawLine>
	ST7789_UnSelect();
 8001056:	2201      	movs	r2, #1
 8001058:	2110      	movs	r1, #16
 800105a:	4803      	ldr	r0, [pc, #12]	@ (8001068 <ST7789_DrawTriangle+0x70>)
 800105c:	f001 fd2a 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	40020000 	.word	0x40020000

0800106c <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b08d      	sub	sp, #52	@ 0x34
 8001070:	af02      	add	r7, sp, #8
 8001072:	4604      	mov	r4, r0
 8001074:	4608      	mov	r0, r1
 8001076:	4611      	mov	r1, r2
 8001078:	461a      	mov	r2, r3
 800107a:	4623      	mov	r3, r4
 800107c:	80fb      	strh	r3, [r7, #6]
 800107e:	4603      	mov	r3, r0
 8001080:	80bb      	strh	r3, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	807b      	strh	r3, [r7, #2]
 8001086:	4613      	mov	r3, r2
 8001088:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800108a:	2200      	movs	r2, #0
 800108c:	2110      	movs	r1, #16
 800108e:	485e      	ldr	r0, [pc, #376]	@ (8001208 <ST7789_DrawFilledTriangle+0x19c>)
 8001090:	f001 fd10 	bl	8002ab4 <HAL_GPIO_WritePin>
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8001094:	2300      	movs	r3, #0
 8001096:	823b      	strh	r3, [r7, #16]
 8001098:	2300      	movs	r3, #0
 800109a:	81fb      	strh	r3, [r7, #14]
 800109c:	2300      	movs	r3, #0
 800109e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80010a0:	2300      	movs	r3, #0
 80010a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80010a4:	2300      	movs	r3, #0
 80010a6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80010a8:	2300      	movs	r3, #0
 80010aa:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 80010ac:	2300      	movs	r3, #0
 80010ae:	83fb      	strh	r3, [r7, #30]
 80010b0:	2300      	movs	r3, #0
 80010b2:	83bb      	strh	r3, [r7, #28]
 80010b4:	2300      	movs	r3, #0
 80010b6:	837b      	strh	r3, [r7, #26]
 80010b8:	2300      	movs	r3, #0
 80010ba:	833b      	strh	r3, [r7, #24]
 80010bc:	2300      	movs	r3, #0
 80010be:	82fb      	strh	r3, [r7, #22]
 80010c0:	2300      	movs	r3, #0
 80010c2:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 80010c8:	887a      	ldrh	r2, [r7, #2]
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bfb8      	it	lt
 80010d2:	425b      	neglt	r3, r3
 80010d4:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 80010d6:	883a      	ldrh	r2, [r7, #0]
 80010d8:	88bb      	ldrh	r3, [r7, #4]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bfb8      	it	lt
 80010e0:	425b      	neglt	r3, r3
 80010e2:	81fb      	strh	r3, [r7, #14]
	x = x1;
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	y = y1;
 80010e8:	88bb      	ldrh	r3, [r7, #4]
 80010ea:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if (x2 >= x1) {
 80010ec:	887a      	ldrh	r2, [r7, #2]
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d304      	bcc.n	80010fe <ST7789_DrawFilledTriangle+0x92>
		xinc1 = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = 1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	843b      	strh	r3, [r7, #32]
 80010fc:	e005      	b.n	800110a <ST7789_DrawFilledTriangle+0x9e>
	}
	else {
		xinc1 = -1;
 80010fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001102:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = -1;
 8001104:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001108:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 800110a:	883a      	ldrh	r2, [r7, #0]
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	429a      	cmp	r2, r3
 8001110:	d304      	bcc.n	800111c <ST7789_DrawFilledTriangle+0xb0>
		yinc1 = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	83bb      	strh	r3, [r7, #28]
 800111a:	e005      	b.n	8001128 <ST7789_DrawFilledTriangle+0xbc>
	}
	else {
		yinc1 = -1;
 800111c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001120:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8001122:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001126:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8001128:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800112c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001130:	429a      	cmp	r2, r3
 8001132:	db11      	blt.n	8001158 <ST7789_DrawFilledTriangle+0xec>
		xinc1 = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	847b      	strh	r3, [r7, #34]	@ 0x22
		yinc2 = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 800113c:	8a3b      	ldrh	r3, [r7, #16]
 800113e:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8001140:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001144:	2b00      	cmp	r3, #0
 8001146:	da00      	bge.n	800114a <ST7789_DrawFilledTriangle+0xde>
 8001148:	3301      	adds	r3, #1
 800114a:	105b      	asrs	r3, r3, #1
 800114c:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8001152:	8a3b      	ldrh	r3, [r7, #16]
 8001154:	82bb      	strh	r3, [r7, #20]
 8001156:	e010      	b.n	800117a <ST7789_DrawFilledTriangle+0x10e>
	}
	else {
		xinc2 = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8001164:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001168:	2b00      	cmp	r3, #0
 800116a:	da00      	bge.n	800116e <ST7789_DrawFilledTriangle+0x102>
 800116c:	3301      	adds	r3, #1
 800116e:	105b      	asrs	r3, r3, #1
 8001170:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8001172:	8a3b      	ldrh	r3, [r7, #16]
 8001174:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800117a:	2300      	movs	r3, #0
 800117c:	827b      	strh	r3, [r7, #18]
 800117e:	e033      	b.n	80011e8 <ST7789_DrawFilledTriangle+0x17c>
		ST7789_DrawLine(x, y, x3, y3, color);
 8001180:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8001182:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001184:	8fbc      	ldrh	r4, [r7, #60]	@ 0x3c
 8001186:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001188:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	4623      	mov	r3, r4
 8001190:	f7ff fc04 	bl	800099c <ST7789_DrawLine>

		num += numadd;
 8001194:	8b3a      	ldrh	r2, [r7, #24]
 8001196:	8afb      	ldrh	r3, [r7, #22]
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
 800119c:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 800119e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80011a2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	db0e      	blt.n	80011c8 <ST7789_DrawFilledTriangle+0x15c>
			num -= den;
 80011aa:	8b3a      	ldrh	r2, [r7, #24]
 80011ac:	8b7b      	ldrh	r3, [r7, #26]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 80011b4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80011b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80011b8:	4413      	add	r3, r2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
			y += yinc1;
 80011be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80011c0:	8bfb      	ldrh	r3, [r7, #30]
 80011c2:	4413      	add	r3, r2
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}
		x += xinc2;
 80011c8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80011ca:	8c3b      	ldrh	r3, [r7, #32]
 80011cc:	4413      	add	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
		y += yinc2;
 80011d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80011d4:	8bbb      	ldrh	r3, [r7, #28]
 80011d6:	4413      	add	r3, r2
 80011d8:	b29b      	uxth	r3, r3
 80011da:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 80011dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	827b      	strh	r3, [r7, #18]
 80011e8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80011ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	ddc5      	ble.n	8001180 <ST7789_DrawFilledTriangle+0x114>
	}
	ST7789_UnSelect();
 80011f4:	2201      	movs	r2, #1
 80011f6:	2110      	movs	r1, #16
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <ST7789_DrawFilledTriangle+0x19c>)
 80011fa:	f001 fc5b 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 80011fe:	bf00      	nop
 8001200:	372c      	adds	r7, #44	@ 0x2c
 8001202:	46bd      	mov	sp, r7
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	bf00      	nop
 8001208:	40020000 	.word	0x40020000

0800120c <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af02      	add	r7, sp, #8
 8001212:	4604      	mov	r4, r0
 8001214:	4608      	mov	r0, r1
 8001216:	4611      	mov	r1, r2
 8001218:	461a      	mov	r2, r3
 800121a:	4623      	mov	r3, r4
 800121c:	80fb      	strh	r3, [r7, #6]
 800121e:	4603      	mov	r3, r0
 8001220:	80bb      	strh	r3, [r7, #4]
 8001222:	460b      	mov	r3, r1
 8001224:	807b      	strh	r3, [r7, #2]
 8001226:	4613      	mov	r3, r2
 8001228:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800122a:	2200      	movs	r2, #0
 800122c:	2110      	movs	r1, #16
 800122e:	4869      	ldr	r0, [pc, #420]	@ (80013d4 <ST7789_DrawFilledCircle+0x1c8>)
 8001230:	f001 fc40 	bl	8002ab4 <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	f1c3 0301 	rsb	r3, r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800123e:	2301      	movs	r3, #1
 8001240:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	461a      	mov	r2, r3
 8001246:	03d2      	lsls	r2, r2, #15
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 8001258:	88f8      	ldrh	r0, [r7, #6]
 800125a:	88ba      	ldrh	r2, [r7, #4]
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	4413      	add	r3, r2
 8001260:	b29b      	uxth	r3, r3
 8001262:	883a      	ldrh	r2, [r7, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fb65 	bl	8000934 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 800126a:	88f8      	ldrh	r0, [r7, #6]
 800126c:	88ba      	ldrh	r2, [r7, #4]
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	b29b      	uxth	r3, r3
 8001274:	883a      	ldrh	r2, [r7, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fb5c 	bl	8000934 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 800127c:	88fa      	ldrh	r2, [r7, #6]
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	4413      	add	r3, r2
 8001282:	b29b      	uxth	r3, r3
 8001284:	88b9      	ldrh	r1, [r7, #4]
 8001286:	883a      	ldrh	r2, [r7, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fb53 	bl	8000934 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	88b9      	ldrh	r1, [r7, #4]
 8001298:	883a      	ldrh	r2, [r7, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fb4a 	bl	8000934 <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	b298      	uxth	r0, r3
 80012a8:	88b9      	ldrh	r1, [r7, #4]
 80012aa:	88fa      	ldrh	r2, [r7, #6]
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	4413      	add	r3, r2
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	88bc      	ldrh	r4, [r7, #4]
 80012b4:	883b      	ldrh	r3, [r7, #0]
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	4623      	mov	r3, r4
 80012ba:	f7ff fb6f 	bl	800099c <ST7789_DrawLine>

	while (x < y) {
 80012be:	e079      	b.n	80013b4 <ST7789_DrawFilledCircle+0x1a8>
		if (f >= 0) {
 80012c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0e      	blt.n	80012e6 <ST7789_DrawFilledCircle+0xda>
			y--;
 80012c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80012d4:	8a7b      	ldrh	r3, [r7, #18]
 80012d6:	3302      	adds	r3, #2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80012dc:	8afa      	ldrh	r2, [r7, #22]
 80012de:	8a7b      	ldrh	r3, [r7, #18]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80012e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	3301      	adds	r3, #1
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80012f2:	8abb      	ldrh	r3, [r7, #20]
 80012f4:	3302      	adds	r3, #2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80012fa:	8afa      	ldrh	r2, [r7, #22]
 80012fc:	8abb      	ldrh	r3, [r7, #20]
 80012fe:	4413      	add	r3, r2
 8001300:	b29b      	uxth	r3, r3
 8001302:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 8001304:	88fa      	ldrh	r2, [r7, #6]
 8001306:	8a3b      	ldrh	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b298      	uxth	r0, r3
 800130c:	88ba      	ldrh	r2, [r7, #4]
 800130e:	89fb      	ldrh	r3, [r7, #14]
 8001310:	4413      	add	r3, r2
 8001312:	b299      	uxth	r1, r3
 8001314:	88fa      	ldrh	r2, [r7, #6]
 8001316:	8a3b      	ldrh	r3, [r7, #16]
 8001318:	4413      	add	r3, r2
 800131a:	b29c      	uxth	r4, r3
 800131c:	88ba      	ldrh	r2, [r7, #4]
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	4413      	add	r3, r2
 8001322:	b29a      	uxth	r2, r3
 8001324:	883b      	ldrh	r3, [r7, #0]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	4613      	mov	r3, r2
 800132a:	4622      	mov	r2, r4
 800132c:	f7ff fb36 	bl	800099c <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 8001330:	88fa      	ldrh	r2, [r7, #6]
 8001332:	8a3b      	ldrh	r3, [r7, #16]
 8001334:	4413      	add	r3, r2
 8001336:	b298      	uxth	r0, r3
 8001338:	88ba      	ldrh	r2, [r7, #4]
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	b299      	uxth	r1, r3
 8001340:	88fa      	ldrh	r2, [r7, #6]
 8001342:	8a3b      	ldrh	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	b29c      	uxth	r4, r3
 8001348:	88ba      	ldrh	r2, [r7, #4]
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	b29a      	uxth	r2, r3
 8001350:	883b      	ldrh	r3, [r7, #0]
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	4613      	mov	r3, r2
 8001356:	4622      	mov	r2, r4
 8001358:	f7ff fb20 	bl	800099c <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	89fb      	ldrh	r3, [r7, #14]
 8001360:	4413      	add	r3, r2
 8001362:	b298      	uxth	r0, r3
 8001364:	88ba      	ldrh	r2, [r7, #4]
 8001366:	8a3b      	ldrh	r3, [r7, #16]
 8001368:	4413      	add	r3, r2
 800136a:	b299      	uxth	r1, r3
 800136c:	88fa      	ldrh	r2, [r7, #6]
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	b29c      	uxth	r4, r3
 8001374:	88ba      	ldrh	r2, [r7, #4]
 8001376:	8a3b      	ldrh	r3, [r7, #16]
 8001378:	4413      	add	r3, r2
 800137a:	b29a      	uxth	r2, r3
 800137c:	883b      	ldrh	r3, [r7, #0]
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	4613      	mov	r3, r2
 8001382:	4622      	mov	r2, r4
 8001384:	f7ff fb0a 	bl	800099c <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8001388:	88fa      	ldrh	r2, [r7, #6]
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	4413      	add	r3, r2
 800138e:	b298      	uxth	r0, r3
 8001390:	88ba      	ldrh	r2, [r7, #4]
 8001392:	8a3b      	ldrh	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	b299      	uxth	r1, r3
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	89fb      	ldrh	r3, [r7, #14]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	b29c      	uxth	r4, r3
 80013a0:	88ba      	ldrh	r2, [r7, #4]
 80013a2:	8a3b      	ldrh	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	883b      	ldrh	r3, [r7, #0]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4613      	mov	r3, r2
 80013ae:	4622      	mov	r2, r4
 80013b0:	f7ff faf4 	bl	800099c <ST7789_DrawLine>
	while (x < y) {
 80013b4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80013b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013bc:	429a      	cmp	r2, r3
 80013be:	f6ff af7f 	blt.w	80012c0 <ST7789_DrawFilledCircle+0xb4>
	}
	ST7789_UnSelect();
 80013c2:	2201      	movs	r2, #1
 80013c4:	2110      	movs	r1, #16
 80013c6:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <ST7789_DrawFilledCircle+0x1c8>)
 80013c8:	f001 fb74 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 80013cc:	bf00      	nop
 80013ce:	371c      	adds	r7, #28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	40020000 	.word	0x40020000

080013d8 <ST7789_Test>:
 * @brief A Simple test function for ST7789
 * @param  none
 * @return  none
 */
void ST7789_Test(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af04      	add	r7, sp, #16
	ST7789_Fill_Color(WHITE);
 80013de:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80013e2:	f7ff fa75 	bl	80008d0 <ST7789_Fill_Color>
	HAL_Delay(1000);
 80013e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ea:	f000 fc91 	bl	8001d10 <HAL_Delay>
	ST7789_WriteString(10, 20, "Speed Test", Font_11x18, RED, WHITE);
 80013ee:	4bc1      	ldr	r3, [pc, #772]	@ (80016f4 <ST7789_Test+0x31c>)
 80013f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013f4:	9202      	str	r2, [sp, #8]
 80013f6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80013fa:	9201      	str	r2, [sp, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	9200      	str	r2, [sp, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4abd      	ldr	r2, [pc, #756]	@ (80016f8 <ST7789_Test+0x320>)
 8001404:	2114      	movs	r1, #20
 8001406:	200a      	movs	r0, #10
 8001408:	f7ff fd4c 	bl	8000ea4 <ST7789_WriteString>
	HAL_Delay(1000);
 800140c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001410:	f000 fc7e 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(CYAN);
 8001414:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8001418:	f7ff fa5a 	bl	80008d0 <ST7789_Fill_Color>
    HAL_Delay(500);
 800141c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001420:	f000 fc76 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(RED);
 8001424:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001428:	f7ff fa52 	bl	80008d0 <ST7789_Fill_Color>
    HAL_Delay(500);
 800142c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001430:	f000 fc6e 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(BLUE);
 8001434:	201f      	movs	r0, #31
 8001436:	f7ff fa4b 	bl	80008d0 <ST7789_Fill_Color>
    HAL_Delay(500);
 800143a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800143e:	f000 fc67 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(GREEN);
 8001442:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001446:	f7ff fa43 	bl	80008d0 <ST7789_Fill_Color>
    HAL_Delay(500);
 800144a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800144e:	f000 fc5f 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(YELLOW);
 8001452:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001456:	f7ff fa3b 	bl	80008d0 <ST7789_Fill_Color>
    HAL_Delay(500);
 800145a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800145e:	f000 fc57 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(BROWN);
 8001462:	f64b 4040 	movw	r0, #48192	@ 0xbc40
 8001466:	f7ff fa33 	bl	80008d0 <ST7789_Fill_Color>
    HAL_Delay(500);
 800146a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800146e:	f000 fc4f 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(DARKBLUE);
 8001472:	f240 10cf 	movw	r0, #463	@ 0x1cf
 8001476:	f7ff fa2b 	bl	80008d0 <ST7789_Fill_Color>
    HAL_Delay(500);
 800147a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800147e:	f000 fc47 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(MAGENTA);
 8001482:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8001486:	f7ff fa23 	bl	80008d0 <ST7789_Fill_Color>
    HAL_Delay(500);
 800148a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800148e:	f000 fc3f 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(LIGHTGREEN);
 8001492:	f248 401f 	movw	r0, #33823	@ 0x841f
 8001496:	f7ff fa1b 	bl	80008d0 <ST7789_Fill_Color>
    HAL_Delay(500);
 800149a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800149e:	f000 fc37 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(LGRAY);
 80014a2:	f24c 6018 	movw	r0, #50712	@ 0xc618
 80014a6:	f7ff fa13 	bl	80008d0 <ST7789_Fill_Color>
    HAL_Delay(500);
 80014aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014ae:	f000 fc2f 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(LBBLUE);
 80014b2:	f642 3012 	movw	r0, #11026	@ 0x2b12
 80014b6:	f7ff fa0b 	bl	80008d0 <ST7789_Fill_Color>
    HAL_Delay(500);
 80014ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014be:	f000 fc27 	bl	8001d10 <HAL_Delay>
	ST7789_Fill_Color(WHITE);
 80014c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014c6:	f7ff fa03 	bl	80008d0 <ST7789_Fill_Color>
	HAL_Delay(500);
 80014ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014ce:	f000 fc1f 	bl	8001d10 <HAL_Delay>

	ST7789_WriteString(10, 10, "Font test.", Font_16x26, GBLUE, WHITE);
 80014d2:	4b8a      	ldr	r3, [pc, #552]	@ (80016fc <ST7789_Test+0x324>)
 80014d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014d8:	9202      	str	r2, [sp, #8]
 80014da:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80014de:	9201      	str	r2, [sp, #4]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a86      	ldr	r2, [pc, #536]	@ (8001700 <ST7789_Test+0x328>)
 80014e8:	210a      	movs	r1, #10
 80014ea:	200a      	movs	r0, #10
 80014ec:	f7ff fcda 	bl	8000ea4 <ST7789_WriteString>
	ST7789_WriteString(10, 50, "Hello Steve!", Font_7x10, RED, WHITE);
 80014f0:	4b84      	ldr	r3, [pc, #528]	@ (8001704 <ST7789_Test+0x32c>)
 80014f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f6:	9202      	str	r2, [sp, #8]
 80014f8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80014fc:	9201      	str	r2, [sp, #4]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	9200      	str	r2, [sp, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a80      	ldr	r2, [pc, #512]	@ (8001708 <ST7789_Test+0x330>)
 8001506:	2132      	movs	r1, #50	@ 0x32
 8001508:	200a      	movs	r0, #10
 800150a:	f7ff fccb 	bl	8000ea4 <ST7789_WriteString>
	ST7789_WriteString(10, 75, "Hello Steve!", Font_11x18, YELLOW, WHITE);
 800150e:	4b79      	ldr	r3, [pc, #484]	@ (80016f4 <ST7789_Test+0x31c>)
 8001510:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001514:	9202      	str	r2, [sp, #8]
 8001516:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800151a:	9201      	str	r2, [sp, #4]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	9200      	str	r2, [sp, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a79      	ldr	r2, [pc, #484]	@ (8001708 <ST7789_Test+0x330>)
 8001524:	214b      	movs	r1, #75	@ 0x4b
 8001526:	200a      	movs	r0, #10
 8001528:	f7ff fcbc 	bl	8000ea4 <ST7789_WriteString>
	ST7789_WriteString(10, 100, "Hello Steve!", Font_16x26, MAGENTA, WHITE);
 800152c:	4b73      	ldr	r3, [pc, #460]	@ (80016fc <ST7789_Test+0x324>)
 800152e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001532:	9202      	str	r2, [sp, #8]
 8001534:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001538:	9201      	str	r2, [sp, #4]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	9200      	str	r2, [sp, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a71      	ldr	r2, [pc, #452]	@ (8001708 <ST7789_Test+0x330>)
 8001542:	2164      	movs	r1, #100	@ 0x64
 8001544:	200a      	movs	r0, #10
 8001546:	f7ff fcad 	bl	8000ea4 <ST7789_WriteString>
	HAL_Delay(1000);
 800154a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800154e:	f000 fbdf 	bl	8001d10 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001552:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001556:	f7ff f9bb 	bl	80008d0 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Rect./Line.", Font_11x18, YELLOW, BLACK);
 800155a:	4b66      	ldr	r3, [pc, #408]	@ (80016f4 <ST7789_Test+0x31c>)
 800155c:	2200      	movs	r2, #0
 800155e:	9202      	str	r2, [sp, #8]
 8001560:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001564:	9201      	str	r2, [sp, #4]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	9200      	str	r2, [sp, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a67      	ldr	r2, [pc, #412]	@ (800170c <ST7789_Test+0x334>)
 800156e:	210a      	movs	r1, #10
 8001570:	200a      	movs	r0, #10
 8001572:	f7ff fc97 	bl	8000ea4 <ST7789_WriteString>
	ST7789_DrawRectangle(30, 30, 100, 100, WHITE);
 8001576:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2364      	movs	r3, #100	@ 0x64
 800157e:	2264      	movs	r2, #100	@ 0x64
 8001580:	211e      	movs	r1, #30
 8001582:	201e      	movs	r0, #30
 8001584:	f7ff fa98 	bl	8000ab8 <ST7789_DrawRectangle>
	HAL_Delay(1000);
 8001588:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800158c:	f000 fbc0 	bl	8001d10 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001590:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001594:	f7ff f99c 	bl	80008d0 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Rect.", Font_11x18, YELLOW, BLACK);
 8001598:	4b56      	ldr	r3, [pc, #344]	@ (80016f4 <ST7789_Test+0x31c>)
 800159a:	2200      	movs	r2, #0
 800159c:	9202      	str	r2, [sp, #8]
 800159e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80015a2:	9201      	str	r2, [sp, #4]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	9200      	str	r2, [sp, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a59      	ldr	r2, [pc, #356]	@ (8001710 <ST7789_Test+0x338>)
 80015ac:	210a      	movs	r1, #10
 80015ae:	200a      	movs	r0, #10
 80015b0:	f7ff fc78 	bl	8000ea4 <ST7789_WriteString>
	ST7789_DrawFilledRectangle(30, 30, 50, 50, WHITE);
 80015b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2332      	movs	r3, #50	@ 0x32
 80015bc:	2232      	movs	r2, #50	@ 0x32
 80015be:	211e      	movs	r1, #30
 80015c0:	201e      	movs	r0, #30
 80015c2:	f7ff fcc1 	bl	8000f48 <ST7789_DrawFilledRectangle>
	HAL_Delay(1000);
 80015c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015ca:	f000 fba1 	bl	8001d10 <HAL_Delay>

	ST7789_Fill_Color(RED);
 80015ce:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80015d2:	f7ff f97d 	bl	80008d0 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Circle.", Font_11x18, YELLOW, BLACK);
 80015d6:	4b47      	ldr	r3, [pc, #284]	@ (80016f4 <ST7789_Test+0x31c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	9202      	str	r2, [sp, #8]
 80015dc:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80015e0:	9201      	str	r2, [sp, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	9200      	str	r2, [sp, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001714 <ST7789_Test+0x33c>)
 80015ea:	210a      	movs	r1, #10
 80015ec:	200a      	movs	r0, #10
 80015ee:	f7ff fc59 	bl	8000ea4 <ST7789_WriteString>
	ST7789_DrawCircle(60, 60, 25, WHITE);
 80015f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f6:	2219      	movs	r2, #25
 80015f8:	213c      	movs	r1, #60	@ 0x3c
 80015fa:	203c      	movs	r0, #60	@ 0x3c
 80015fc:	f7ff faa0 	bl	8000b40 <ST7789_DrawCircle>
	HAL_Delay(1000);
 8001600:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001604:	f000 fb84 	bl	8001d10 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001608:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800160c:	f7ff f960 	bl	80008d0 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Cir.", Font_11x18, YELLOW, BLACK);
 8001610:	4b38      	ldr	r3, [pc, #224]	@ (80016f4 <ST7789_Test+0x31c>)
 8001612:	2200      	movs	r2, #0
 8001614:	9202      	str	r2, [sp, #8]
 8001616:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800161a:	9201      	str	r2, [sp, #4]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	9200      	str	r2, [sp, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a3d      	ldr	r2, [pc, #244]	@ (8001718 <ST7789_Test+0x340>)
 8001624:	210a      	movs	r1, #10
 8001626:	200a      	movs	r0, #10
 8001628:	f7ff fc3c 	bl	8000ea4 <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 60, 25, WHITE);
 800162c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001630:	2219      	movs	r2, #25
 8001632:	213c      	movs	r1, #60	@ 0x3c
 8001634:	203c      	movs	r0, #60	@ 0x3c
 8001636:	f7ff fde9 	bl	800120c <ST7789_DrawFilledCircle>
	HAL_Delay(1000);
 800163a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800163e:	f000 fb67 	bl	8001d10 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001642:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001646:	f7ff f943 	bl	80008d0 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Triangle", Font_11x18, YELLOW, BLACK);
 800164a:	4b2a      	ldr	r3, [pc, #168]	@ (80016f4 <ST7789_Test+0x31c>)
 800164c:	2200      	movs	r2, #0
 800164e:	9202      	str	r2, [sp, #8]
 8001650:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001654:	9201      	str	r2, [sp, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	9200      	str	r2, [sp, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a2f      	ldr	r2, [pc, #188]	@ (800171c <ST7789_Test+0x344>)
 800165e:	210a      	movs	r1, #10
 8001660:	200a      	movs	r0, #10
 8001662:	f7ff fc1f 	bl	8000ea4 <ST7789_WriteString>
	ST7789_DrawTriangle(30, 30, 30, 70, 60, 40, WHITE);
 8001666:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	2328      	movs	r3, #40	@ 0x28
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	233c      	movs	r3, #60	@ 0x3c
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2346      	movs	r3, #70	@ 0x46
 8001676:	221e      	movs	r2, #30
 8001678:	211e      	movs	r1, #30
 800167a:	201e      	movs	r0, #30
 800167c:	f7ff fcbc 	bl	8000ff8 <ST7789_DrawTriangle>
	HAL_Delay(1000);
 8001680:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001684:	f000 fb44 	bl	8001d10 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001688:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800168c:	f7ff f920 	bl	80008d0 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Tri", Font_11x18, YELLOW, BLACK);
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <ST7789_Test+0x31c>)
 8001692:	2200      	movs	r2, #0
 8001694:	9202      	str	r2, [sp, #8]
 8001696:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800169a:	9201      	str	r2, [sp, #4]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	9200      	str	r2, [sp, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001720 <ST7789_Test+0x348>)
 80016a4:	210a      	movs	r1, #10
 80016a6:	200a      	movs	r0, #10
 80016a8:	f7ff fbfc 	bl	8000ea4 <ST7789_WriteString>
	ST7789_DrawFilledTriangle(30, 30, 30, 70, 60, 40, WHITE);
 80016ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	2328      	movs	r3, #40	@ 0x28
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	233c      	movs	r3, #60	@ 0x3c
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2346      	movs	r3, #70	@ 0x46
 80016bc:	221e      	movs	r2, #30
 80016be:	211e      	movs	r1, #30
 80016c0:	201e      	movs	r0, #30
 80016c2:	f7ff fcd3 	bl	800106c <ST7789_DrawFilledTriangle>
	HAL_Delay(1000);
 80016c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ca:	f000 fb21 	bl	8001d10 <HAL_Delay>

	//	If FLASH cannot storage anymore datas, please delete codes below.
	ST7789_Fill_Color(WHITE);
 80016ce:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80016d2:	f7ff f8fd 	bl	80008d0 <ST7789_Fill_Color>
	ST7789_DrawImage(0, 0, 128, 128, (uint16_t *)saber);
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <ST7789_Test+0x34c>)
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	2280      	movs	r2, #128	@ 0x80
 80016de:	2100      	movs	r1, #0
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff fb13 	bl	8000d0c <ST7789_DrawImage>
	HAL_Delay(3000);
 80016e6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80016ea:	f000 fb11 	bl	8001d10 <HAL_Delay>
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	08003f3c 	.word	0x08003f3c
 80016fc:	20000014 	.word	0x20000014
 8001700:	08003f48 	.word	0x08003f48
 8001704:	20000004 	.word	0x20000004
 8001708:	08003f54 	.word	0x08003f54
 800170c:	08003f64 	.word	0x08003f64
 8001710:	08003f70 	.word	0x08003f70
 8001714:	08003f80 	.word	0x08003f80
 8001718:	08003f88 	.word	0x08003f88
 800171c:	08003f94 	.word	0x08003f94
 8001720:	08003fa0 	.word	0x08003fa0
 8001724:	080067c0 	.word	0x080067c0

08001728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0


  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800172c:	f000 f948 	bl	80019c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001730:	f000 fa91 	bl	8001c56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001734:	f000 f80c 	bl	8001750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001738:	f000 f8d4 	bl	80018e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800173c:	f000 f8b4 	bl	80018a8 <MX_DMA_Init>
  MX_SPI1_Init();
 8001740:	f000 f874 	bl	800182c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ST7789_Init();
 8001744:	f7ff f81c 	bl	8000780 <ST7789_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	ST7789_Test();
 8001748:	f7ff fe46 	bl	80013d8 <ST7789_Test>
 800174c:	e7fc      	b.n	8001748 <main+0x20>
	...

08001750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b094      	sub	sp, #80	@ 0x50
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	2230      	movs	r2, #48	@ 0x30
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f002 fba0 	bl	8003ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <SystemClock_Config+0xd4>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	4a2a      	ldr	r2, [pc, #168]	@ (8001824 <SystemClock_Config+0xd4>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001780:	4b28      	ldr	r3, [pc, #160]	@ (8001824 <SystemClock_Config+0xd4>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800178c:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <SystemClock_Config+0xd8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001794:	4a24      	ldr	r2, [pc, #144]	@ (8001828 <SystemClock_Config+0xd8>)
 8001796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <SystemClock_Config+0xd8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a8:	2302      	movs	r3, #2
 80017aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ac:	2301      	movs	r3, #1
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b0:	2310      	movs	r3, #16
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b4:	2302      	movs	r3, #2
 80017b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b8:	2300      	movs	r3, #0
 80017ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017bc:	2308      	movs	r3, #8
 80017be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80017c0:	2364      	movs	r3, #100	@ 0x64
 80017c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c4:	2302      	movs	r3, #2
 80017c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017c8:	2302      	movs	r3, #2
 80017ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	4618      	mov	r0, r3
 80017d2:	f001 f9d9 	bl	8002b88 <HAL_RCC_OscConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80017dc:	f000 f91c 	bl	8001a18 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017e0:	f001 f982 	bl	8002ae8 <HAL_PWREx_EnableOverDrive>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017ea:	f000 f915 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ee:	230f      	movs	r3, #15
 80017f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f2:	2302      	movs	r3, #2
 80017f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	2103      	movs	r1, #3
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fc60 	bl	80030d0 <HAL_RCC_ClockConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001816:	f000 f8ff 	bl	8001a18 <Error_Handler>
  }
}
 800181a:	bf00      	nop
 800181c:	3750      	adds	r7, #80	@ 0x50
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000

0800182c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <MX_SPI1_Init+0x74>)
 8001832:	4a1c      	ldr	r2, [pc, #112]	@ (80018a4 <MX_SPI1_Init+0x78>)
 8001834:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <MX_SPI1_Init+0x74>)
 8001838:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800183c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800183e:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <MX_SPI1_Init+0x74>)
 8001840:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001844:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001846:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <MX_SPI1_Init+0x74>)
 8001848:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800184c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800184e:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <MX_SPI1_Init+0x74>)
 8001850:	2202      	movs	r2, #2
 8001852:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <MX_SPI1_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_SPI1_Init+0x74>)
 800185c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001860:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001862:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <MX_SPI1_Init+0x74>)
 8001864:	2208      	movs	r2, #8
 8001866:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <MX_SPI1_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <MX_SPI1_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <MX_SPI1_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <MX_SPI1_Init+0x74>)
 800187c:	2207      	movs	r2, #7
 800187e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001880:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <MX_SPI1_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <MX_SPI1_Init+0x74>)
 8001888:	2208      	movs	r2, #8
 800188a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800188c:	4804      	ldr	r0, [pc, #16]	@ (80018a0 <MX_SPI1_Init+0x74>)
 800188e:	f001 fdd1 	bl	8003434 <HAL_SPI_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001898:	f000 f8be 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2001c244 	.word	0x2001c244
 80018a4:	40013000 	.word	0x40013000

080018a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018ae:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_DMA_Init+0x38>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <MX_DMA_Init+0x38>)
 80018b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <MX_DMA_Init+0x38>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	203b      	movs	r0, #59	@ 0x3b
 80018cc:	f000 fb1f 	bl	8001f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80018d0:	203b      	movs	r0, #59	@ 0x3b
 80018d2:	f000 fb38 	bl	8001f46 <HAL_NVIC_EnableIRQ>

}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	@ 0x28
 80018e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	4b2e      	ldr	r3, [pc, #184]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a2d      	ldr	r2, [pc, #180]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b2b      	ldr	r3, [pc, #172]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	4b28      	ldr	r3, [pc, #160]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a27      	ldr	r2, [pc, #156]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800192a:	4b22      	ldr	r3, [pc, #136]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a21      	ldr	r2, [pc, #132]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b1f      	ldr	r3, [pc, #124]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b1c      	ldr	r3, [pc, #112]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a1b      	ldr	r2, [pc, #108]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <MX_GPIO_Init+0xd0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001960:	4815      	ldr	r0, [pc, #84]	@ (80019b8 <MX_GPIO_Init+0xd4>)
 8001962:	f001 f8a7 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2180      	movs	r1, #128	@ 0x80
 800196a:	4814      	ldr	r0, [pc, #80]	@ (80019bc <MX_GPIO_Init+0xd8>)
 800196c:	f001 f8a2 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 8001970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	480b      	ldr	r0, [pc, #44]	@ (80019b8 <MX_GPIO_Init+0xd4>)
 800198a:	f000 fee7 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	@ (80019bc <MX_GPIO_Init+0xd8>)
 80019a6:	f000 fed9 	bl	800275c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	@ 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00

080019c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80019c6:	463b      	mov	r3, r7
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80019d2:	f000 fad3 	bl	8001f7c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80019d6:	2301      	movs	r3, #1
 80019d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80019da:	2300      	movs	r3, #0
 80019dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80019e2:	231f      	movs	r3, #31
 80019e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80019e6:	2387      	movs	r3, #135	@ 0x87
 80019e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80019ee:	2300      	movs	r3, #0
 80019f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80019f2:	2301      	movs	r3, #1
 80019f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80019f6:	2301      	movs	r3, #1
 80019f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a02:	463b      	mov	r3, r7
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 faf1 	bl	8001fec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a0a:	2004      	movs	r0, #4
 8001a0c:	f000 face 	bl	8001fac <HAL_MPU_Enable>

}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <Error_Handler+0x8>

08001a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a46:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_MspInit+0x44>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a33      	ldr	r2, [pc, #204]	@ (8001b58 <HAL_SPI_MspInit+0xec>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d160      	bne.n	8001b50 <HAL_SPI_MspInit+0xe4>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a8e:	4b33      	ldr	r3, [pc, #204]	@ (8001b5c <HAL_SPI_MspInit+0xf0>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	4a32      	ldr	r2, [pc, #200]	@ (8001b5c <HAL_SPI_MspInit+0xf0>)
 8001a94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9a:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <HAL_SPI_MspInit+0xf0>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b5c <HAL_SPI_MspInit+0xf0>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8001b5c <HAL_SPI_MspInit+0xf0>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b5c <HAL_SPI_MspInit+0xf0>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ST7789_CS_Pin|GPIO_PIN_5|GPIO_PIN_7;
 8001abe:	23b0      	movs	r3, #176	@ 0xb0
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ace:	2305      	movs	r3, #5
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4821      	ldr	r0, [pc, #132]	@ (8001b60 <HAL_SPI_MspInit+0xf4>)
 8001ada:	f000 fe3f 	bl	800275c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001ade:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001ae0:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <HAL_SPI_MspInit+0xfc>)
 8001ae2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001ae6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001aea:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001aee:	2240      	movs	r2, #64	@ 0x40
 8001af0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001afa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001afe:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b00:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001b02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b06:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001b0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b0e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b16:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001b1e:	2204      	movs	r2, #4
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001b24:	2203      	movs	r2, #3
 8001b26:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b34:	480b      	ldr	r0, [pc, #44]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001b36:	f000 fa99 	bl	800206c <HAL_DMA_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 8001b40:	f7ff ff6a 	bl	8001a18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001b48:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b4a:	4a06      	ldr	r2, [pc, #24]	@ (8001b64 <HAL_SPI_MspInit+0xf8>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	@ 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40013000 	.word	0x40013000
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020000 	.word	0x40020000
 8001b64:	2001c2a8 	.word	0x2001c2a8
 8001b68:	40026458 	.word	0x40026458

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <NMI_Handler+0x4>

08001b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <MemManage_Handler+0x4>

08001b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc2:	f000 f885 	bl	8001cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <DMA2_Stream3_IRQHandler+0x10>)
 8001bd2:	f000 fb59 	bl	8002288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2001c2a8 	.word	0x2001c2a8

08001be0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <SystemInit+0x20>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bea:	4a05      	ldr	r2, [pc, #20]	@ (8001c00 <SystemInit+0x20>)
 8001bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c08:	f7ff ffea 	bl	8001be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c0c:	480c      	ldr	r0, [pc, #48]	@ (8001c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c0e:	490d      	ldr	r1, [pc, #52]	@ (8001c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c10:	4a0d      	ldr	r2, [pc, #52]	@ (8001c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c14:	e002      	b.n	8001c1c <LoopCopyDataInit>

08001c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1a:	3304      	adds	r3, #4

08001c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c20:	d3f9      	bcc.n	8001c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c22:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c24:	4c0a      	ldr	r4, [pc, #40]	@ (8001c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c28:	e001      	b.n	8001c2e <LoopFillZerobss>

08001c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c2c:	3204      	adds	r2, #4

08001c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c30:	d3fb      	bcc.n	8001c2a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001c32:	f002 f93f 	bl	8003eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c36:	f7ff fd77 	bl	8001728 <main>
  bx  lr    
 8001c3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c3c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c44:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001c48:	0800e7e8 	.word	0x0800e7e8
  ldr r2, =_sbss
 8001c4c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001c50:	2001c30c 	.word	0x2001c30c

08001c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c54:	e7fe      	b.n	8001c54 <ADC_IRQHandler>

08001c56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	f000 f94c 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c60:	200f      	movs	r0, #15
 8001c62:	f000 f805 	bl	8001c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c66:	f7ff fedd 	bl	8001a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_InitTick+0x54>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_InitTick+0x58>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f967 	bl	8001f62 <HAL_SYSTICK_Config>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00e      	b.n	8001cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b0f      	cmp	r3, #15
 8001ca2:	d80a      	bhi.n	8001cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f000 f92f 	bl	8001f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb0:	4a06      	ldr	r2, [pc, #24]	@ (8001ccc <HAL_InitTick+0x5c>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e000      	b.n	8001cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	2000001c 	.word	0x2000001c
 8001cc8:	20000024 	.word	0x20000024
 8001ccc:	20000020 	.word	0x20000020

08001cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_IncTick+0x20>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_IncTick+0x24>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_IncTick+0x24>)
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000024 	.word	0x20000024
 8001cf4:	2001c308 	.word	0x2001c308

08001cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <HAL_GetTick+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	2001c308 	.word	0x2001c308

08001d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff ffee 	bl	8001cf8 <HAL_GetTick>
 8001d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d005      	beq.n	8001d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <HAL_Delay+0x44>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d36:	bf00      	nop
 8001d38:	f7ff ffde 	bl	8001cf8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d8f7      	bhi.n	8001d38 <HAL_Delay+0x28>
  {
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000024 	.word	0x20000024

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <__NVIC_SetPriorityGrouping+0x40>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d86:	4a04      	ldr	r2, [pc, #16]	@ (8001d98 <__NVIC_SetPriorityGrouping+0x40>)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00
 8001d9c:	05fa0000 	.word	0x05fa0000

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db0b      	blt.n	8001de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	4907      	ldr	r1, [pc, #28]	@ (8001df4 <__NVIC_EnableIRQ+0x38>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2001      	movs	r0, #1
 8001dde:	fa00 f202 	lsl.w	r2, r0, r2
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000e100 	.word	0xe000e100

08001df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db0a      	blt.n	8001e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	490c      	ldr	r1, [pc, #48]	@ (8001e44 <__NVIC_SetPriority+0x4c>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e20:	e00a      	b.n	8001e38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4908      	ldr	r1, [pc, #32]	@ (8001e48 <__NVIC_SetPriority+0x50>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	440b      	add	r3, r1
 8001e36:	761a      	strb	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	@ 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f1c3 0307 	rsb	r3, r3, #7
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf28      	it	cs
 8001e6a:	2304      	movcs	r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d902      	bls.n	8001e7c <NVIC_EncodePriority+0x30>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b03      	subs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <NVIC_EncodePriority+0x32>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	4313      	orrs	r3, r2
         );
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	@ 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec4:	d301      	bcc.n	8001eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00f      	b.n	8001eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <SysTick_Config+0x40>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f7ff ff8e 	bl	8001df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <SysTick_Config+0x40>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <SysTick_Config+0x40>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff29 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f20:	f7ff ff3e 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff ff8e 	bl	8001e4c <NVIC_EncodePriority>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff5d 	bl	8001df8 <__NVIC_SetPriority>
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff31 	bl	8001dbc <__NVIC_EnableIRQ>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ffa2 	bl	8001eb4 <SysTick_Config>
 8001f70:	4603      	mov	r3, r0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f80:	f3bf 8f5f 	dmb	sy
}
 8001f84:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f86:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <HAL_MPU_Disable+0x28>)
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	4a06      	ldr	r2, [pc, #24]	@ (8001fa4 <HAL_MPU_Disable+0x28>)
 8001f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f90:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f92:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_MPU_Disable+0x2c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00
 8001fa8:	e000ed90 	.word	0xe000ed90

08001fac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe4 <HAL_MPU_Enable+0x38>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <HAL_MPU_Enable+0x3c>)
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	4a09      	ldr	r2, [pc, #36]	@ (8001fe8 <HAL_MPU_Enable+0x3c>)
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001fca:	f3bf 8f4f 	dsb	sy
}
 8001fce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fd0:	f3bf 8f6f 	isb	sy
}
 8001fd4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed90 	.word	0xe000ed90
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	785a      	ldrb	r2, [r3, #1]
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HAL_MPU_ConfigRegion+0x7c>)
 8001ffa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_MPU_ConfigRegion+0x7c>)
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	4a19      	ldr	r2, [pc, #100]	@ (8002068 <HAL_MPU_ConfigRegion+0x7c>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002008:	4a17      	ldr	r2, [pc, #92]	@ (8002068 <HAL_MPU_ConfigRegion+0x7c>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7b1b      	ldrb	r3, [r3, #12]
 8002014:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7adb      	ldrb	r3, [r3, #11]
 800201a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800201c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7a9b      	ldrb	r3, [r3, #10]
 8002022:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002024:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7b5b      	ldrb	r3, [r3, #13]
 800202a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800202c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7b9b      	ldrb	r3, [r3, #14]
 8002032:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002034:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7bdb      	ldrb	r3, [r3, #15]
 800203a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800203c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7a5b      	ldrb	r3, [r3, #9]
 8002042:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002044:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7a1b      	ldrb	r3, [r3, #8]
 800204a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800204c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	7812      	ldrb	r2, [r2, #0]
 8002052:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002054:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002056:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002058:	6113      	str	r3, [r2, #16]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000ed90 	.word	0xe000ed90

0800206c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff fe3e 	bl	8001cf8 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e099      	b.n	80021bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a8:	e00f      	b.n	80020ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020aa:	f7ff fe25 	bl	8001cf8 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d908      	bls.n	80020ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2203      	movs	r2, #3
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e078      	b.n	80021bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e8      	bne.n	80020aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	4b38      	ldr	r3, [pc, #224]	@ (80021c4 <HAL_DMA_Init+0x158>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002102:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	2b04      	cmp	r3, #4
 8002122:	d107      	bne.n	8002134 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	4313      	orrs	r3, r2
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f023 0307 	bic.w	r3, r3, #7
 800214a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	4313      	orrs	r3, r2
 8002154:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215a:	2b04      	cmp	r3, #4
 800215c:	d117      	bne.n	800218e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00e      	beq.n	800218e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 fa77 	bl	8002664 <DMA_CheckFifoParam>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2240      	movs	r2, #64	@ 0x40
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800218a:	2301      	movs	r3, #1
 800218c:	e016      	b.n	80021bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fa2e 	bl	80025f8 <DMA_CalcBaseAndBitshift>
 800219c:	4603      	mov	r3, r0
 800219e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a4:	223f      	movs	r2, #63	@ 0x3f
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	f010803f 	.word	0xf010803f

080021c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_DMA_Start_IT+0x26>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e048      	b.n	8002280 <HAL_DMA_Start_IT+0xb8>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d137      	bne.n	8002272 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f9c0 	bl	800259c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002220:	223f      	movs	r2, #63	@ 0x3f
 8002222:	409a      	lsls	r2, r3
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0216 	orr.w	r2, r2, #22
 8002236:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002246:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0208 	orr.w	r2, r2, #8
 800225e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e005      	b.n	800227e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800227a:	2302      	movs	r3, #2
 800227c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800227e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002294:	4b8e      	ldr	r3, [pc, #568]	@ (80024d0 <HAL_DMA_IRQHandler+0x248>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a8e      	ldr	r2, [pc, #568]	@ (80024d4 <HAL_DMA_IRQHandler+0x24c>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	0a9b      	lsrs	r3, r3, #10
 80022a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	2208      	movs	r2, #8
 80022b4:	409a      	lsls	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d01a      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0204 	bic.w	r2, r2, #4
 80022da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e0:	2208      	movs	r2, #8
 80022e2:	409a      	lsls	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ec:	f043 0201 	orr.w	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f8:	2201      	movs	r2, #1
 80022fa:	409a      	lsls	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d012      	beq.n	800232a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002316:	2201      	movs	r2, #1
 8002318:	409a      	lsls	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002322:	f043 0202 	orr.w	r2, r3, #2
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232e:	2204      	movs	r2, #4
 8002330:	409a      	lsls	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d012      	beq.n	8002360 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00b      	beq.n	8002360 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234c:	2204      	movs	r2, #4
 800234e:	409a      	lsls	r2, r3
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002358:	f043 0204 	orr.w	r2, r3, #4
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002364:	2210      	movs	r2, #16
 8002366:	409a      	lsls	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d043      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d03c      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002382:	2210      	movs	r2, #16
 8002384:	409a      	lsls	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d018      	beq.n	80023ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d108      	bne.n	80023b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d024      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
 80023b6:	e01f      	b.n	80023f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01b      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	4798      	blx	r3
 80023c8:	e016      	b.n	80023f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0208 	bic.w	r2, r2, #8
 80023e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fc:	2220      	movs	r2, #32
 80023fe:	409a      	lsls	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 808f 	beq.w	8002528 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 8087 	beq.w	8002528 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241e:	2220      	movs	r2, #32
 8002420:	409a      	lsls	r2, r3
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b05      	cmp	r3, #5
 8002430:	d136      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0216 	bic.w	r2, r2, #22
 8002440:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002450:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d103      	bne.n	8002462 <HAL_DMA_IRQHandler+0x1da>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0208 	bic.w	r2, r2, #8
 8002470:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002476:	223f      	movs	r2, #63	@ 0x3f
 8002478:	409a      	lsls	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002492:	2b00      	cmp	r3, #0
 8002494:	d07e      	beq.n	8002594 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4798      	blx	r3
        }
        return;
 800249e:	e079      	b.n	8002594 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01d      	beq.n	80024ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10d      	bne.n	80024d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d031      	beq.n	8002528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
 80024cc:	e02c      	b.n	8002528 <HAL_DMA_IRQHandler+0x2a0>
 80024ce:	bf00      	nop
 80024d0:	2000001c 	.word	0x2000001c
 80024d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d023      	beq.n	8002528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4798      	blx	r3
 80024e8:	e01e      	b.n	8002528 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10f      	bne.n	8002518 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0210 	bic.w	r2, r2, #16
 8002506:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	2b00      	cmp	r3, #0
 800252e:	d032      	beq.n	8002596 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d022      	beq.n	8002582 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2205      	movs	r2, #5
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	3301      	adds	r3, #1
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	429a      	cmp	r2, r3
 800255e:	d307      	bcc.n	8002570 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f2      	bne.n	8002554 <HAL_DMA_IRQHandler+0x2cc>
 800256e:	e000      	b.n	8002572 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002570:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	4798      	blx	r3
 8002592:	e000      	b.n	8002596 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002594:	bf00      	nop
    }
  }
}
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b40      	cmp	r3, #64	@ 0x40
 80025c8:	d108      	bne.n	80025dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025da:	e007      	b.n	80025ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	3b10      	subs	r3, #16
 8002608:	4a13      	ldr	r2, [pc, #76]	@ (8002658 <DMA_CalcBaseAndBitshift+0x60>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002612:	4a12      	ldr	r2, [pc, #72]	@ (800265c <DMA_CalcBaseAndBitshift+0x64>)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b03      	cmp	r3, #3
 8002624:	d908      	bls.n	8002638 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	4b0c      	ldr	r3, [pc, #48]	@ (8002660 <DMA_CalcBaseAndBitshift+0x68>)
 800262e:	4013      	ands	r3, r2
 8002630:	1d1a      	adds	r2, r3, #4
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	659a      	str	r2, [r3, #88]	@ 0x58
 8002636:	e006      	b.n	8002646 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <DMA_CalcBaseAndBitshift+0x68>)
 8002640:	4013      	ands	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	aaaaaaab 	.word	0xaaaaaaab
 800265c:	0800e7d0 	.word	0x0800e7d0
 8002660:	fffffc00 	.word	0xfffffc00

08002664 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11f      	bne.n	80026be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d856      	bhi.n	8002732 <DMA_CheckFifoParam+0xce>
 8002684:	a201      	add	r2, pc, #4	@ (adr r2, 800268c <DMA_CheckFifoParam+0x28>)
 8002686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268a:	bf00      	nop
 800268c:	0800269d 	.word	0x0800269d
 8002690:	080026af 	.word	0x080026af
 8002694:	0800269d 	.word	0x0800269d
 8002698:	08002733 	.word	0x08002733
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d046      	beq.n	8002736 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ac:	e043      	b.n	8002736 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026b6:	d140      	bne.n	800273a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e03d      	b.n	800273a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026c6:	d121      	bne.n	800270c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d837      	bhi.n	800273e <DMA_CheckFifoParam+0xda>
 80026ce:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <DMA_CheckFifoParam+0x70>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	080026e5 	.word	0x080026e5
 80026d8:	080026eb 	.word	0x080026eb
 80026dc:	080026e5 	.word	0x080026e5
 80026e0:	080026fd 	.word	0x080026fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      break;
 80026e8:	e030      	b.n	800274c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d025      	beq.n	8002742 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fa:	e022      	b.n	8002742 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002704:	d11f      	bne.n	8002746 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800270a:	e01c      	b.n	8002746 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d903      	bls.n	800271a <DMA_CheckFifoParam+0xb6>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d003      	beq.n	8002720 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002718:	e018      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
      break;
 800271e:	e015      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00e      	beq.n	800274a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      break;
 8002730:	e00b      	b.n	800274a <DMA_CheckFifoParam+0xe6>
      break;
 8002732:	bf00      	nop
 8002734:	e00a      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      break;
 8002736:	bf00      	nop
 8002738:	e008      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      break;
 800273a:	bf00      	nop
 800273c:	e006      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      break;
 800273e:	bf00      	nop
 8002740:	e004      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      break;
 8002742:	bf00      	nop
 8002744:	e002      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      break;   
 8002746:	bf00      	nop
 8002748:	e000      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
    }
  } 
  
  return status; 
 800274c:	7bfb      	ldrb	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	@ 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	e175      	b.n	8002a68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800277c:	2201      	movs	r2, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	429a      	cmp	r2, r3
 8002796:	f040 8164 	bne.w	8002a62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d005      	beq.n	80027b2 <HAL_GPIO_Init+0x56>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d130      	bne.n	8002814 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 0201 	and.w	r2, r3, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b03      	cmp	r3, #3
 800281e:	d017      	beq.n	8002850 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d123      	bne.n	80028a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3208      	adds	r2, #8
 8002864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	220f      	movs	r2, #15
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	08da      	lsrs	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3208      	adds	r2, #8
 800289e:	69b9      	ldr	r1, [r7, #24]
 80028a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0203 	and.w	r2, r3, #3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80be 	beq.w	8002a62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e6:	4b66      	ldr	r3, [pc, #408]	@ (8002a80 <HAL_GPIO_Init+0x324>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	4a65      	ldr	r2, [pc, #404]	@ (8002a80 <HAL_GPIO_Init+0x324>)
 80028ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028f2:	4b63      	ldr	r3, [pc, #396]	@ (8002a80 <HAL_GPIO_Init+0x324>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028fe:	4a61      	ldr	r2, [pc, #388]	@ (8002a84 <HAL_GPIO_Init+0x328>)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	3302      	adds	r3, #2
 8002906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	220f      	movs	r2, #15
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a58      	ldr	r2, [pc, #352]	@ (8002a88 <HAL_GPIO_Init+0x32c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d037      	beq.n	800299a <HAL_GPIO_Init+0x23e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a57      	ldr	r2, [pc, #348]	@ (8002a8c <HAL_GPIO_Init+0x330>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d031      	beq.n	8002996 <HAL_GPIO_Init+0x23a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a56      	ldr	r2, [pc, #344]	@ (8002a90 <HAL_GPIO_Init+0x334>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d02b      	beq.n	8002992 <HAL_GPIO_Init+0x236>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a55      	ldr	r2, [pc, #340]	@ (8002a94 <HAL_GPIO_Init+0x338>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d025      	beq.n	800298e <HAL_GPIO_Init+0x232>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a54      	ldr	r2, [pc, #336]	@ (8002a98 <HAL_GPIO_Init+0x33c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01f      	beq.n	800298a <HAL_GPIO_Init+0x22e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a53      	ldr	r2, [pc, #332]	@ (8002a9c <HAL_GPIO_Init+0x340>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d019      	beq.n	8002986 <HAL_GPIO_Init+0x22a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a52      	ldr	r2, [pc, #328]	@ (8002aa0 <HAL_GPIO_Init+0x344>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_GPIO_Init+0x226>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a51      	ldr	r2, [pc, #324]	@ (8002aa4 <HAL_GPIO_Init+0x348>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00d      	beq.n	800297e <HAL_GPIO_Init+0x222>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a50      	ldr	r2, [pc, #320]	@ (8002aa8 <HAL_GPIO_Init+0x34c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <HAL_GPIO_Init+0x21e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4f      	ldr	r2, [pc, #316]	@ (8002aac <HAL_GPIO_Init+0x350>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_GPIO_Init+0x21a>
 8002972:	2309      	movs	r3, #9
 8002974:	e012      	b.n	800299c <HAL_GPIO_Init+0x240>
 8002976:	230a      	movs	r3, #10
 8002978:	e010      	b.n	800299c <HAL_GPIO_Init+0x240>
 800297a:	2308      	movs	r3, #8
 800297c:	e00e      	b.n	800299c <HAL_GPIO_Init+0x240>
 800297e:	2307      	movs	r3, #7
 8002980:	e00c      	b.n	800299c <HAL_GPIO_Init+0x240>
 8002982:	2306      	movs	r3, #6
 8002984:	e00a      	b.n	800299c <HAL_GPIO_Init+0x240>
 8002986:	2305      	movs	r3, #5
 8002988:	e008      	b.n	800299c <HAL_GPIO_Init+0x240>
 800298a:	2304      	movs	r3, #4
 800298c:	e006      	b.n	800299c <HAL_GPIO_Init+0x240>
 800298e:	2303      	movs	r3, #3
 8002990:	e004      	b.n	800299c <HAL_GPIO_Init+0x240>
 8002992:	2302      	movs	r3, #2
 8002994:	e002      	b.n	800299c <HAL_GPIO_Init+0x240>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_GPIO_Init+0x240>
 800299a:	2300      	movs	r3, #0
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	f002 0203 	and.w	r2, r2, #3
 80029a2:	0092      	lsls	r2, r2, #2
 80029a4:	4093      	lsls	r3, r2
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029ac:	4935      	ldr	r1, [pc, #212]	@ (8002a84 <HAL_GPIO_Init+0x328>)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ba:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029de:	4a34      	ldr	r2, [pc, #208]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e4:	4b32      	ldr	r3, [pc, #200]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a08:	4a29      	ldr	r2, [pc, #164]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a0e:	4b28      	ldr	r3, [pc, #160]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a32:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a38:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a5c:	4a14      	ldr	r2, [pc, #80]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	f67f ae86 	bls.w	800277c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3724      	adds	r7, #36	@ 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40013800 	.word	0x40013800
 8002a88:	40020000 	.word	0x40020000
 8002a8c:	40020400 	.word	0x40020400
 8002a90:	40020800 	.word	0x40020800
 8002a94:	40020c00 	.word	0x40020c00
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40021400 	.word	0x40021400
 8002aa0:	40021800 	.word	0x40021800
 8002aa4:	40021c00 	.word	0x40021c00
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	40022400 	.word	0x40022400
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac4:	787b      	ldrb	r3, [r7, #1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ad0:	e003      	b.n	8002ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ad2:	887b      	ldrh	r3, [r7, #2]
 8002ad4:	041a      	lsls	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	619a      	str	r2, [r3, #24]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	4b23      	ldr	r3, [pc, #140]	@ (8002b80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	4a22      	ldr	r2, [pc, #136]	@ (8002b80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002afe:	4b20      	ldr	r3, [pc, #128]	@ (8002b80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b16:	f7ff f8ef 	bl	8001cf8 <HAL_GetTick>
 8002b1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b1c:	e009      	b.n	8002b32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b1e:	f7ff f8eb 	bl	8001cf8 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b2c:	d901      	bls.n	8002b32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e022      	b.n	8002b78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b32:	4b14      	ldr	r3, [pc, #80]	@ (8002b84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b3e:	d1ee      	bne.n	8002b1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b40:	4b10      	ldr	r3, [pc, #64]	@ (8002b84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0f      	ldr	r2, [pc, #60]	@ (8002b84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b4c:	f7ff f8d4 	bl	8001cf8 <HAL_GetTick>
 8002b50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b52:	e009      	b.n	8002b68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b54:	f7ff f8d0 	bl	8001cf8 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b62:	d901      	bls.n	8002b68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e007      	b.n	8002b78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b74:	d1ee      	bne.n	8002b54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40007000 	.word	0x40007000

08002b88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e291      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8087 	beq.w	8002cba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bac:	4b96      	ldr	r3, [pc, #600]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb8:	4b93      	ldr	r3, [pc, #588]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d112      	bne.n	8002bea <HAL_RCC_OscConfig+0x62>
 8002bc4:	4b90      	ldr	r3, [pc, #576]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bd0:	d10b      	bne.n	8002bea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd2:	4b8d      	ldr	r3, [pc, #564]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d06c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x130>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d168      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e26b      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x7a>
 8002bf4:	4b84      	ldr	r3, [pc, #528]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a83      	ldr	r2, [pc, #524]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	e02e      	b.n	8002c60 <HAL_RCC_OscConfig+0xd8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x9c>
 8002c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b7c      	ldr	r3, [pc, #496]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7b      	ldr	r2, [pc, #492]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0xd8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0xc0>
 8002c2e:	4b76      	ldr	r3, [pc, #472]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a75      	ldr	r2, [pc, #468]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b73      	ldr	r3, [pc, #460]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a72      	ldr	r2, [pc, #456]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xd8>
 8002c48:	4b6f      	ldr	r3, [pc, #444]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b6c      	ldr	r3, [pc, #432]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6b      	ldr	r2, [pc, #428]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7ff f846 	bl	8001cf8 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7ff f842 	bl	8001cf8 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	@ 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e21f      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b61      	ldr	r3, [pc, #388]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xe8>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7ff f832 	bl	8001cf8 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7ff f82e 	bl	8001cf8 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	@ 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e20b      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b57      	ldr	r3, [pc, #348]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x110>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d069      	beq.n	8002d9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc6:	4b50      	ldr	r3, [pc, #320]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x190>
 8002cde:	4b4a      	ldr	r3, [pc, #296]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b47      	ldr	r3, [pc, #284]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x17a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1df      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b41      	ldr	r3, [pc, #260]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	493d      	ldr	r1, [pc, #244]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e040      	b.n	8002d9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d023      	beq.n	8002d68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b39      	ldr	r3, [pc, #228]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a38      	ldr	r2, [pc, #224]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe ffe4 	bl	8001cf8 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d34:	f7fe ffe0 	bl	8001cf8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e1bd      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d46:	4b30      	ldr	r3, [pc, #192]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b2d      	ldr	r3, [pc, #180]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4929      	ldr	r1, [pc, #164]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]
 8002d66:	e018      	b.n	8002d9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d68:	4b27      	ldr	r3, [pc, #156]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a26      	ldr	r2, [pc, #152]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe ffc0 	bl	8001cf8 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fe ffbc 	bl	8001cf8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e199      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d038      	beq.n	8002e18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d019      	beq.n	8002de2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4b16      	ldr	r3, [pc, #88]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db2:	4a15      	ldr	r2, [pc, #84]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe ff9d 	bl	8001cf8 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc2:	f7fe ff99 	bl	8001cf8 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e176      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x23a>
 8002de0:	e01a      	b.n	8002e18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de2:	4b09      	ldr	r3, [pc, #36]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de6:	4a08      	ldr	r2, [pc, #32]	@ (8002e08 <HAL_RCC_OscConfig+0x280>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fe ff83 	bl	8001cf8 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df6:	f7fe ff7f 	bl	8001cf8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d903      	bls.n	8002e0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e15c      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
 8002e08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	4b91      	ldr	r3, [pc, #580]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1ee      	bne.n	8002df6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80a4 	beq.w	8002f6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e26:	4b8b      	ldr	r3, [pc, #556]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10d      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	4b88      	ldr	r3, [pc, #544]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	4a87      	ldr	r2, [pc, #540]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e3e:	4b85      	ldr	r3, [pc, #532]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4e:	4b82      	ldr	r3, [pc, #520]	@ (8003058 <HAL_RCC_OscConfig+0x4d0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d118      	bne.n	8002e8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003058 <HAL_RCC_OscConfig+0x4d0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a7e      	ldr	r2, [pc, #504]	@ (8003058 <HAL_RCC_OscConfig+0x4d0>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e66:	f7fe ff47 	bl	8001cf8 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6e:	f7fe ff43 	bl	8001cf8 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b64      	cmp	r3, #100	@ 0x64
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e120      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e80:	4b75      	ldr	r3, [pc, #468]	@ (8003058 <HAL_RCC_OscConfig+0x4d0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x31a>
 8002e94:	4b6f      	ldr	r3, [pc, #444]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e98:	4a6e      	ldr	r2, [pc, #440]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea0:	e02d      	b.n	8002efe <HAL_RCC_OscConfig+0x376>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x33c>
 8002eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eae:	4a69      	ldr	r2, [pc, #420]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb6:	4b67      	ldr	r3, [pc, #412]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eba:	4a66      	ldr	r2, [pc, #408]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec2:	e01c      	b.n	8002efe <HAL_RCC_OscConfig+0x376>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d10c      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x35e>
 8002ecc:	4b61      	ldr	r3, [pc, #388]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed0:	4a60      	ldr	r2, [pc, #384]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed8:	4b5e      	ldr	r3, [pc, #376]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002edc:	4a5d      	ldr	r2, [pc, #372]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee4:	e00b      	b.n	8002efe <HAL_RCC_OscConfig+0x376>
 8002ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eea:	4a5a      	ldr	r2, [pc, #360]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef2:	4b58      	ldr	r3, [pc, #352]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef6:	4a57      	ldr	r2, [pc, #348]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002ef8:	f023 0304 	bic.w	r3, r3, #4
 8002efc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d015      	beq.n	8002f32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fe fef7 	bl	8001cf8 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe fef3 	bl	8001cf8 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0ce      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	4b4b      	ldr	r3, [pc, #300]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ee      	beq.n	8002f0e <HAL_RCC_OscConfig+0x386>
 8002f30:	e014      	b.n	8002f5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f32:	f7fe fee1 	bl	8001cf8 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7fe fedd 	bl	8001cf8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e0b8      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f50:	4b40      	ldr	r3, [pc, #256]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ee      	bne.n	8002f3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d105      	bne.n	8002f6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f62:	4b3c      	ldr	r3, [pc, #240]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	4a3b      	ldr	r2, [pc, #236]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80a4 	beq.w	80030c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f78:	4b36      	ldr	r3, [pc, #216]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d06b      	beq.n	800305c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d149      	bne.n	8003020 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8c:	4b31      	ldr	r3, [pc, #196]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a30      	ldr	r2, [pc, #192]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002f92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe feae 	bl	8001cf8 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe feaa 	bl	8001cf8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e087      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b28      	ldr	r3, [pc, #160]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002fe6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002fea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fec:	4b19      	ldr	r3, [pc, #100]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a18      	ldr	r2, [pc, #96]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8002ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fe7e 	bl	8001cf8 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe fe7a 	bl	8001cf8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e057      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003012:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x478>
 800301e:	e04f      	b.n	80030c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003020:	4b0c      	ldr	r3, [pc, #48]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0b      	ldr	r2, [pc, #44]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8003026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800302a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fe fe64 	bl	8001cf8 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe fe60 	bl	8001cf8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e03d      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	4b03      	ldr	r3, [pc, #12]	@ (8003054 <HAL_RCC_OscConfig+0x4cc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x4ac>
 8003052:	e035      	b.n	80030c0 <HAL_RCC_OscConfig+0x538>
 8003054:	40023800 	.word	0x40023800
 8003058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800305c:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <HAL_RCC_OscConfig+0x544>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d028      	beq.n	80030bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d121      	bne.n	80030bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d11a      	bne.n	80030bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003092:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003094:	4293      	cmp	r3, r2
 8003096:	d111      	bne.n	80030bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	3b01      	subs	r3, #1
 80030a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0d0      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d910      	bls.n	8003118 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b67      	ldr	r3, [pc, #412]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 020f 	bic.w	r2, r3, #15
 80030fe:	4965      	ldr	r1, [pc, #404]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b63      	ldr	r3, [pc, #396]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0b8      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003130:	4b59      	ldr	r3, [pc, #356]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a58      	ldr	r2, [pc, #352]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003136:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800313a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003148:	4b53      	ldr	r3, [pc, #332]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a52      	ldr	r2, [pc, #328]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800314e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003152:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b50      	ldr	r3, [pc, #320]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	494d      	ldr	r1, [pc, #308]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d040      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b47      	ldr	r3, [pc, #284]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d115      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e07f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	4b41      	ldr	r3, [pc, #260]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e073      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e06b      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b2:	4b39      	ldr	r3, [pc, #228]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f023 0203 	bic.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4936      	ldr	r1, [pc, #216]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c4:	f7fe fd98 	bl	8001cf8 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031cc:	f7fe fd94 	bl	8001cf8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e053      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 020c 	and.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1eb      	bne.n	80031cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b27      	ldr	r3, [pc, #156]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d210      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b24      	ldr	r3, [pc, #144]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 020f 	bic.w	r2, r3, #15
 800320a:	4922      	ldr	r1, [pc, #136]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b20      	ldr	r3, [pc, #128]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e032      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b19      	ldr	r3, [pc, #100]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4916      	ldr	r1, [pc, #88]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800324e:	4b12      	ldr	r3, [pc, #72]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	490e      	ldr	r1, [pc, #56]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003262:	f000 f821 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003266:	4602      	mov	r2, r0
 8003268:	4b0b      	ldr	r3, [pc, #44]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	490a      	ldr	r1, [pc, #40]	@ (800329c <HAL_RCC_ClockConfig+0x1cc>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a09      	ldr	r2, [pc, #36]	@ (80032a0 <HAL_RCC_ClockConfig+0x1d0>)
 800327c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800327e:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <HAL_RCC_ClockConfig+0x1d4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe fcf4 	bl	8001c70 <HAL_InitTick>

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023c00 	.word	0x40023c00
 8003298:	40023800 	.word	0x40023800
 800329c:	0800e7c0 	.word	0x0800e7c0
 80032a0:	2000001c 	.word	0x2000001c
 80032a4:	20000020 	.word	0x20000020

080032a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ac:	b090      	sub	sp, #64	@ 0x40
 80032ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80032b4:	2300      	movs	r3, #0
 80032b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032b8:	2300      	movs	r3, #0
 80032ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c0:	4b59      	ldr	r3, [pc, #356]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x180>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d00d      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x40>
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	f200 80a1 	bhi.w	8003414 <HAL_RCC_GetSysClockFreq+0x16c>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x34>
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032da:	e09b      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b53      	ldr	r3, [pc, #332]	@ (800342c <HAL_RCC_GetSysClockFreq+0x184>)
 80032de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032e0:	e09b      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e2:	4b53      	ldr	r3, [pc, #332]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x188>)
 80032e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032e6:	e098      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032f2:	4b4d      	ldr	r3, [pc, #308]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x180>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d028      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x180>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	2200      	movs	r2, #0
 8003306:	623b      	str	r3, [r7, #32]
 8003308:	627a      	str	r2, [r7, #36]	@ 0x24
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003310:	2100      	movs	r1, #0
 8003312:	4b47      	ldr	r3, [pc, #284]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x188>)
 8003314:	fb03 f201 	mul.w	r2, r3, r1
 8003318:	2300      	movs	r3, #0
 800331a:	fb00 f303 	mul.w	r3, r0, r3
 800331e:	4413      	add	r3, r2
 8003320:	4a43      	ldr	r2, [pc, #268]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x188>)
 8003322:	fba0 1202 	umull	r1, r2, r0, r2
 8003326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003328:	460a      	mov	r2, r1
 800332a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800332c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800332e:	4413      	add	r3, r2
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003334:	2200      	movs	r2, #0
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	61fa      	str	r2, [r7, #28]
 800333a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800333e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003342:	f7fc ff61 	bl	8000208 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4613      	mov	r3, r2
 800334c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800334e:	e053      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003350:	4b35      	ldr	r3, [pc, #212]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x180>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	2200      	movs	r2, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	617a      	str	r2, [r7, #20]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003362:	f04f 0b00 	mov.w	fp, #0
 8003366:	4652      	mov	r2, sl
 8003368:	465b      	mov	r3, fp
 800336a:	f04f 0000 	mov.w	r0, #0
 800336e:	f04f 0100 	mov.w	r1, #0
 8003372:	0159      	lsls	r1, r3, #5
 8003374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003378:	0150      	lsls	r0, r2, #5
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	ebb2 080a 	subs.w	r8, r2, sl
 8003382:	eb63 090b 	sbc.w	r9, r3, fp
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003392:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003396:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800339a:	ebb2 0408 	subs.w	r4, r2, r8
 800339e:	eb63 0509 	sbc.w	r5, r3, r9
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	00eb      	lsls	r3, r5, #3
 80033ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033b0:	00e2      	lsls	r2, r4, #3
 80033b2:	4614      	mov	r4, r2
 80033b4:	461d      	mov	r5, r3
 80033b6:	eb14 030a 	adds.w	r3, r4, sl
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	eb45 030b 	adc.w	r3, r5, fp
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ce:	4629      	mov	r1, r5
 80033d0:	028b      	lsls	r3, r1, #10
 80033d2:	4621      	mov	r1, r4
 80033d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d8:	4621      	mov	r1, r4
 80033da:	028a      	lsls	r2, r1, #10
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e2:	2200      	movs	r2, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	60fa      	str	r2, [r7, #12]
 80033e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033ec:	f7fc ff0c 	bl	8000208 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4613      	mov	r3, r2
 80033f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x180>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	3301      	adds	r3, #1
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003408:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800340a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003412:	e002      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003414:	4b05      	ldr	r3, [pc, #20]	@ (800342c <HAL_RCC_GetSysClockFreq+0x184>)
 8003416:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800341c:	4618      	mov	r0, r3
 800341e:	3740      	adds	r7, #64	@ 0x40
 8003420:	46bd      	mov	sp, r7
 8003422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	00f42400 	.word	0x00f42400
 8003430:	017d7840 	.word	0x017d7840

08003434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e09d      	b.n	8003582 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	2b00      	cmp	r3, #0
 800344c:	d108      	bne.n	8003460 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003456:	d009      	beq.n	800346c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	61da      	str	r2, [r3, #28]
 800345e:	e005      	b.n	800346c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe faf0 	bl	8001a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034ac:	d902      	bls.n	80034b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e002      	b.n	80034ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034c2:	d007      	beq.n	80034d4 <HAL_SPI_Init+0xa0>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034cc:	d002      	beq.n	80034d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003516:	ea42 0103 	orr.w	r1, r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	0c1b      	lsrs	r3, r3, #16
 8003530:	f003 0204 	and.w	r2, r3, #4
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003550:	ea42 0103 	orr.w	r1, r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b088      	sub	sp, #32
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800359a:	f7fe fbad 	bl	8001cf8 <HAL_GetTick>
 800359e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d001      	beq.n	80035b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
 80035b2:	e15c      	b.n	800386e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_SPI_Transmit+0x36>
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e154      	b.n	800386e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_SPI_Transmit+0x48>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e14d      	b.n	800386e <HAL_SPI_Transmit+0x2e4>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2203      	movs	r2, #3
 80035de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	88fa      	ldrh	r2, [r7, #6]
 80035f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003624:	d10f      	bne.n	8003646 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003634:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003644:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003650:	2b40      	cmp	r3, #64	@ 0x40
 8003652:	d007      	beq.n	8003664 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003662:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800366c:	d952      	bls.n	8003714 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_SPI_Transmit+0xf2>
 8003676:	8b7b      	ldrh	r3, [r7, #26]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d145      	bne.n	8003708 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003680:	881a      	ldrh	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	1c9a      	adds	r2, r3, #2
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036a0:	e032      	b.n	8003708 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d112      	bne.n	80036d6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b4:	881a      	ldrh	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c0:	1c9a      	adds	r2, r3, #2
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036d4:	e018      	b.n	8003708 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d6:	f7fe fb0f 	bl	8001cf8 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d803      	bhi.n	80036ee <HAL_SPI_Transmit+0x164>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d102      	bne.n	80036f4 <HAL_SPI_Transmit+0x16a>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e0b2      	b.n	800386e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1c7      	bne.n	80036a2 <HAL_SPI_Transmit+0x118>
 8003712:	e083      	b.n	800381c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_SPI_Transmit+0x198>
 800371c:	8b7b      	ldrh	r3, [r7, #26]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d177      	bne.n	8003812 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d912      	bls.n	8003752 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003730:	881a      	ldrh	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373c:	1c9a      	adds	r2, r3, #2
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b02      	subs	r3, #2
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003750:	e05f      	b.n	8003812 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	330c      	adds	r3, #12
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003778:	e04b      	b.n	8003812 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b02      	cmp	r3, #2
 8003786:	d12b      	bne.n	80037e0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d912      	bls.n	80037b8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	881a      	ldrh	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	1c9a      	adds	r2, r3, #2
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b02      	subs	r3, #2
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037b6:	e02c      	b.n	8003812 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037de:	e018      	b.n	8003812 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e0:	f7fe fa8a 	bl	8001cf8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d803      	bhi.n	80037f8 <HAL_SPI_Transmit+0x26e>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d102      	bne.n	80037fe <HAL_SPI_Transmit+0x274>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e02d      	b.n	800386e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ae      	bne.n	800377a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	6839      	ldr	r1, [r7, #0]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fad5 	bl	8003dd0 <SPI_EndRxTxTransaction>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800386c:	2300      	movs	r3, #0
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	4613      	mov	r3, r2
 8003884:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d001      	beq.n	8003896 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8003892:	2302      	movs	r3, #2
 8003894:	e0d4      	b.n	8003a40 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_SPI_Transmit_DMA+0x2a>
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e0cc      	b.n	8003a40 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_SPI_Transmit_DMA+0x3c>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e0c5      	b.n	8003a40 <HAL_SPI_Transmit_DMA+0x1c8>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2203      	movs	r2, #3
 80038c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	88fa      	ldrh	r2, [r7, #6]
 80038d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	88fa      	ldrh	r2, [r7, #6]
 80038da:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003906:	d10f      	bne.n	8003928 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003916:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003926:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392c:	4a46      	ldr	r2, [pc, #280]	@ (8003a48 <HAL_SPI_Transmit_DMA+0x1d0>)
 800392e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003934:	4a45      	ldr	r2, [pc, #276]	@ (8003a4c <HAL_SPI_Transmit_DMA+0x1d4>)
 8003936:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393c:	4a44      	ldr	r2, [pc, #272]	@ (8003a50 <HAL_SPI_Transmit_DMA+0x1d8>)
 800393e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003944:	2200      	movs	r2, #0
 8003946:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003956:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003960:	d82d      	bhi.n	80039be <HAL_SPI_Transmit_DMA+0x146>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396c:	d127      	bne.n	80039be <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003972:	b29b      	uxth	r3, r3
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10f      	bne.n	800399c <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800398a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003990:	b29b      	uxth	r3, r3
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800399a:	e010      	b.n	80039be <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039aa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c6:	4619      	mov	r1, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	330c      	adds	r3, #12
 80039ce:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039d4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80039d6:	f7fe fbf7 	bl	80021c8 <HAL_DMA_Start_IT>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00b      	beq.n	80039f8 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e4:	f043 0210 	orr.w	r2, r3, #16
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e023      	b.n	8003a40 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a02:	2b40      	cmp	r3, #64	@ 0x40
 8003a04:	d007      	beq.n	8003a16 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a14:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0220 	orr.w	r2, r2, #32
 8003a2c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0202 	orr.w	r2, r2, #2
 8003a3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	08003b39 	.word	0x08003b39
 8003a4c:	08003a91 	.word	0x08003a91
 8003a50:	08003b55 	.word	0x08003b55

08003a54 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a9e:	f7fe f92b 	bl	8001cf8 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab2:	d03b      	beq.n	8003b2c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0220 	bic.w	r2, r2, #32
 8003ac2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0202 	bic.w	r2, r2, #2
 8003ad2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	2164      	movs	r1, #100	@ 0x64
 8003ad8:	6978      	ldr	r0, [r7, #20]
 8003ada:	f000 f979 	bl	8003dd0 <SPI_EndRxTxTransaction>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae8:	f043 0220 	orr.w	r2, r3, #32
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2200      	movs	r2, #0
 8003b12:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003b24:	6978      	ldr	r0, [r7, #20]
 8003b26:	f7ff ffa9 	bl	8003a7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b2a:	e002      	b.n	8003b32 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003b2c:	6978      	ldr	r0, [r7, #20]
 8003b2e:	f7ff ff91 	bl	8003a54 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff ff8e 	bl	8003a68 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0203 	bic.w	r2, r2, #3
 8003b70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b76:	f043 0210 	orr.w	r2, r3, #16
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f7ff ff78 	bl	8003a7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ba4:	f7fe f8a8 	bl	8001cf8 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bb4:	f7fe f8a0 	bl	8001cf8 <HAL_GetTick>
 8003bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bba:	4b39      	ldr	r3, [pc, #228]	@ (8003ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	015b      	lsls	r3, r3, #5
 8003bc0:	0d1b      	lsrs	r3, r3, #20
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bca:	e055      	b.n	8003c78 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d051      	beq.n	8003c78 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bd4:	f7fe f890 	bl	8001cf8 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d902      	bls.n	8003bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d13d      	bne.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c02:	d111      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c0c:	d004      	beq.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c16:	d107      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c30:	d10f      	bne.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e018      	b.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	e002      	b.n	8003c78 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4013      	ands	r3, r2
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d19a      	bne.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	2000001c 	.word	0x2000001c

08003ca4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	@ 0x28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cb6:	f7fe f81f 	bl	8001cf8 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003cc6:	f7fe f817 	bl	8001cf8 <HAL_GetTick>
 8003cca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8003dcc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	00da      	lsls	r2, r3, #3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	0d1b      	lsrs	r3, r3, #20
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003cec:	e061      	b.n	8003db2 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cf4:	d107      	bne.n	8003d06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d104      	bne.n	8003d06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d051      	beq.n	8003db2 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d0e:	f7fd fff3 	bl	8001cf8 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d902      	bls.n	8003d24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d13d      	bne.n	8003da0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d3c:	d111      	bne.n	8003d62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d46:	d004      	beq.n	8003d52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d50:	d107      	bne.n	8003d62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6a:	d10f      	bne.n	8003d8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e011      	b.n	8003dc4 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003daa:	e002      	b.n	8003db2 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d195      	bne.n	8003cee <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3728      	adds	r7, #40	@ 0x28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	2000001c 	.word	0x2000001c

08003dd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f7ff ff5b 	bl	8003ca4 <SPI_WaitFifoStateUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e046      	b.n	8003e92 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e04:	4b25      	ldr	r3, [pc, #148]	@ (8003e9c <SPI_EndRxTxTransaction+0xcc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a25      	ldr	r2, [pc, #148]	@ (8003ea0 <SPI_EndRxTxTransaction+0xd0>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	0d5b      	lsrs	r3, r3, #21
 8003e10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e14:	fb02 f303 	mul.w	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e22:	d112      	bne.n	8003e4a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2180      	movs	r1, #128	@ 0x80
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff feb0 	bl	8003b94 <SPI_WaitFlagStateUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3e:	f043 0220 	orr.w	r2, r3, #32
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e023      	b.n	8003e92 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e60:	2b80      	cmp	r3, #128	@ 0x80
 8003e62:	d0f2      	beq.n	8003e4a <SPI_EndRxTxTransaction+0x7a>
 8003e64:	e000      	b.n	8003e68 <SPI_EndRxTxTransaction+0x98>
        break;
 8003e66:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7ff ff15 	bl	8003ca4 <SPI_WaitFifoStateUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e000      	b.n	8003e92 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	2000001c 	.word	0x2000001c
 8003ea0:	165e9f81 	.word	0x165e9f81

08003ea4 <memset>:
 8003ea4:	4402      	add	r2, r0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d100      	bne.n	8003eae <memset+0xa>
 8003eac:	4770      	bx	lr
 8003eae:	f803 1b01 	strb.w	r1, [r3], #1
 8003eb2:	e7f9      	b.n	8003ea8 <memset+0x4>

08003eb4 <__libc_init_array>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	4d0d      	ldr	r5, [pc, #52]	@ (8003eec <__libc_init_array+0x38>)
 8003eb8:	4c0d      	ldr	r4, [pc, #52]	@ (8003ef0 <__libc_init_array+0x3c>)
 8003eba:	1b64      	subs	r4, r4, r5
 8003ebc:	10a4      	asrs	r4, r4, #2
 8003ebe:	2600      	movs	r6, #0
 8003ec0:	42a6      	cmp	r6, r4
 8003ec2:	d109      	bne.n	8003ed8 <__libc_init_array+0x24>
 8003ec4:	4d0b      	ldr	r5, [pc, #44]	@ (8003ef4 <__libc_init_array+0x40>)
 8003ec6:	4c0c      	ldr	r4, [pc, #48]	@ (8003ef8 <__libc_init_array+0x44>)
 8003ec8:	f000 f818 	bl	8003efc <_init>
 8003ecc:	1b64      	subs	r4, r4, r5
 8003ece:	10a4      	asrs	r4, r4, #2
 8003ed0:	2600      	movs	r6, #0
 8003ed2:	42a6      	cmp	r6, r4
 8003ed4:	d105      	bne.n	8003ee2 <__libc_init_array+0x2e>
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}
 8003ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003edc:	4798      	blx	r3
 8003ede:	3601      	adds	r6, #1
 8003ee0:	e7ee      	b.n	8003ec0 <__libc_init_array+0xc>
 8003ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee6:	4798      	blx	r3
 8003ee8:	3601      	adds	r6, #1
 8003eea:	e7f2      	b.n	8003ed2 <__libc_init_array+0x1e>
 8003eec:	0800e7e0 	.word	0x0800e7e0
 8003ef0:	0800e7e0 	.word	0x0800e7e0
 8003ef4:	0800e7e0 	.word	0x0800e7e0
 8003ef8:	0800e7e4 	.word	0x0800e7e4

08003efc <_init>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	bf00      	nop
 8003f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f02:	bc08      	pop	{r3}
 8003f04:	469e      	mov	lr, r3
 8003f06:	4770      	bx	lr

08003f08 <_fini>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	bf00      	nop
 8003f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0e:	bc08      	pop	{r3}
 8003f10:	469e      	mov	lr, r3
 8003f12:	4770      	bx	lr
